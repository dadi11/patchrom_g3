package com.android.internal.telephony.gsm;

import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.os.AsyncResult;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.UserHandle;
import android.provider.Settings.Global;
import android.provider.Settings.SettingNotFoundException;
import android.provider.Telephony.CellBroadcasts;
import android.telephony.CellIdentityGsm;
import android.telephony.CellIdentityLte;
import android.telephony.CellIdentityWcdma;
import android.telephony.CellInfo;
import android.telephony.CellInfoGsm;
import android.telephony.CellInfoLte;
import android.telephony.CellInfoWcdma;
import android.telephony.CellLocation;
import android.telephony.RadioAccessFamily;
import android.telephony.Rlog;
import android.telephony.ServiceState;
import android.telephony.SignalStrength;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.telephony.gsm.GsmCellLocation;
import android.text.TextUtils;
import android.util.EventLog;
import android.util.TimeUtils;
import com.android.internal.telephony.CommandsInterface.RadioState;
import com.android.internal.telephony.EventLogTags;
import com.android.internal.telephony.MccTable;
import com.android.internal.telephony.Phone;
import com.android.internal.telephony.ProxyController;
import com.android.internal.telephony.RestrictedState;
import com.android.internal.telephony.ServiceStateTracker;
import com.android.internal.telephony.SmsHeader;
import com.android.internal.telephony.cdma.SignalToneUtil;
import com.android.internal.telephony.cdma.sms.UserData;
import com.android.internal.telephony.dataconnection.DcTrackerBase;
import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState;
import com.android.internal.telephony.uicc.IccRecords;
import com.android.internal.telephony.uicc.UiccCardApplication;
import com.google.android.mms.pdu.CharacterSets;
import com.google.android.mms.pdu.PduHeaders;
import com.google.android.mms.pdu.PduPersister;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

final class GsmServiceStateTracker extends ServiceStateTracker {
    static final int CS_DISABLED = 1004;
    static final int CS_EMERGENCY_ENABLED = 1006;
    static final int CS_ENABLED = 1003;
    static final int CS_NORMAL_ENABLED = 1005;
    static final int CS_NOTIFICATION = 999;
    private static final int EVENT_ALL_DATA_DISCONNECTED = 1001;
    static final String LOG_TAG = "GsmSST";
    static final int PS_DISABLED = 1002;
    static final int PS_ENABLED = 1001;
    static final int PS_NOTIFICATION = 888;
    static final boolean VDBG = false;
    private static final String WAKELOCK_TAG = "ServiceStateTracker";
    private ContentObserver mAutoTimeObserver;
    private ContentObserver mAutoTimeZoneObserver;
    GsmCellLocation mCellLoc;
    private ContentResolver mCr;
    private boolean mDataRoaming;
    private boolean mEmergencyOnly;
    private boolean mGotCountryCode;
    private boolean mGsmRoaming;
    private BroadcastReceiver mIntentReceiver;
    private int mMaxDataCalls;
    private boolean mNeedFixZoneAfterNitz;
    GsmCellLocation mNewCellLoc;
    private int mNewMaxDataCalls;
    private int mNewReasonDataDenied;
    private boolean mNitzUpdatedTime;
    private Notification mNotification;
    private GSMPhone mPhone;
    int mPreferredNetworkType;
    private int mReasonDataDenied;
    private boolean mReportedGprsNoReg;
    long mSavedAtTime;
    long mSavedTime;
    String mSavedTimeZone;
    private boolean mStartedGprsRegCheck;
    private WakeLock mWakeLock;
    private boolean mZoneDst;
    private int mZoneOffset;
    private long mZoneTime;

    /* renamed from: com.android.internal.telephony.gsm.GsmServiceStateTracker.1 */
    class C00691 extends BroadcastReceiver {
        C00691() {
        }

        public void onReceive(Context context, Intent intent) {
            if (!GsmServiceStateTracker.this.mPhone.mIsTheCurrentActivePhone) {
                Rlog.e(GsmServiceStateTracker.LOG_TAG, "Received Intent " + intent + " while being destroyed. Ignoring.");
            } else if (intent.getAction().equals("android.intent.action.LOCALE_CHANGED")) {
                GsmServiceStateTracker.this.updateSpnDisplay();
            } else if (intent.getAction().equals("android.intent.action.ACTION_RADIO_OFF")) {
                GsmServiceStateTracker.this.mAlarmSwitch = GsmServiceStateTracker.VDBG;
                GsmServiceStateTracker.this.powerOffRadioSafely(GsmServiceStateTracker.this.mPhone.mDcTracker);
            } else if (intent.getAction().equals("android.intent.action.ACTION_SET_RADIO_CAPABILITY_DONE")) {
                GsmServiceStateTracker.this.log("Received Intent ACTION_SET_RADIO_CAPABILITY_DONE");
                ArrayList<RadioAccessFamily> newPhoneRcList = intent.getParcelableArrayListExtra("rafs");
                if (newPhoneRcList == null || newPhoneRcList.size() == 0) {
                    GsmServiceStateTracker.this.log("EXTRA_RADIO_ACCESS_FAMILY not present.");
                } else {
                    GsmServiceStateTracker.this.onSetPhoneRCDone(newPhoneRcList);
                }
            }
        }
    }

    /* renamed from: com.android.internal.telephony.gsm.GsmServiceStateTracker.2 */
    class C00702 extends ContentObserver {
        C00702(Handler x0) {
            super(x0);
        }

        public void onChange(boolean selfChange) {
            Rlog.i("GsmServiceStateTracker", "Auto time state changed");
            GsmServiceStateTracker.this.revertToNitzTime();
        }
    }

    /* renamed from: com.android.internal.telephony.gsm.GsmServiceStateTracker.3 */
    class C00713 extends ContentObserver {
        C00713(Handler x0) {
            super(x0);
        }

        public void onChange(boolean selfChange) {
            Rlog.i("GsmServiceStateTracker", "Auto time zone state changed");
            GsmServiceStateTracker.this.revertToNitzTimeZone();
        }
    }

    /* renamed from: com.android.internal.telephony.gsm.GsmServiceStateTracker.4 */
    static /* synthetic */ class C00724 {
        static final /* synthetic */ int[] f9x46dd5024;

        static {
            f9x46dd5024 = new int[RadioState.values().length];
            try {
                f9x46dd5024[RadioState.RADIO_UNAVAILABLE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                f9x46dd5024[RadioState.RADIO_OFF.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
        }
    }

    public GsmServiceStateTracker(GSMPhone phone) {
        boolean z = VDBG;
        super(phone, phone.mCi, new CellInfoGsm());
        this.mMaxDataCalls = 1;
        this.mNewMaxDataCalls = 1;
        this.mReasonDataDenied = -1;
        this.mNewReasonDataDenied = -1;
        this.mGsmRoaming = VDBG;
        this.mDataRoaming = VDBG;
        this.mEmergencyOnly = VDBG;
        this.mNeedFixZoneAfterNitz = VDBG;
        this.mGotCountryCode = VDBG;
        this.mNitzUpdatedTime = VDBG;
        this.mStartedGprsRegCheck = VDBG;
        this.mReportedGprsNoReg = VDBG;
        this.mIntentReceiver = new C00691();
        this.mAutoTimeObserver = new C00702(new Handler());
        this.mAutoTimeZoneObserver = new C00713(new Handler());
        this.mPhone = phone;
        this.mCellLoc = new GsmCellLocation();
        this.mNewCellLoc = new GsmCellLocation();
        this.mWakeLock = ((PowerManager) phone.getContext().getSystemService("power")).newWakeLock(1, WAKELOCK_TAG);
        this.mCi.registerForAvailable(this, 13, null);
        this.mCi.registerForRadioStateChanged(this, 1, null);
        this.mCi.registerForVoiceNetworkStateChanged(this, 2, null);
        this.mCi.setOnNITZTime(this, 11, null);
        this.mCi.setOnRestrictedStateChanged(this, 23, null);
        if (Global.getInt(phone.getContext().getContentResolver(), "airplane_mode_on", 0) <= 0) {
            z = true;
        }
        this.mDesiredPowerState = z;
        this.mCr = phone.getContext().getContentResolver();
        this.mCr.registerContentObserver(Global.getUriFor("auto_time"), true, this.mAutoTimeObserver);
        this.mCr.registerContentObserver(Global.getUriFor("auto_time_zone"), true, this.mAutoTimeZoneObserver);
        setSignalStrengthDefaultValues();
        IntentFilter filter = new IntentFilter();
        filter.addAction("android.intent.action.LOCALE_CHANGED");
        phone.getContext().registerReceiver(this.mIntentReceiver, filter);
        filter = new IntentFilter();
        Context context = phone.getContext();
        filter.addAction("android.intent.action.ACTION_RADIO_OFF");
        filter.addAction("android.intent.action.ACTION_SET_RADIO_CAPABILITY_DONE");
        context.registerReceiver(this.mIntentReceiver, filter);
    }

    public void dispose() {
        checkCorrectThread();
        log("ServiceStateTracker dispose");
        this.mCi.unregisterForAvailable(this);
        this.mCi.unregisterForRadioStateChanged(this);
        this.mCi.unregisterForVoiceNetworkStateChanged(this);
        if (this.mUiccApplcation != null) {
            this.mUiccApplcation.unregisterForReady(this);
        }
        if (this.mIccRecords != null) {
            this.mIccRecords.unregisterForRecordsLoaded(this);
        }
        this.mCi.unSetOnRestrictedStateChanged(this);
        this.mCi.unSetOnNITZTime(this);
        this.mCr.unregisterContentObserver(this.mAutoTimeObserver);
        this.mCr.unregisterContentObserver(this.mAutoTimeZoneObserver);
        this.mPhone.getContext().unregisterReceiver(this.mIntentReceiver);
        super.dispose();
    }

    protected void finalize() {
        log("finalize");
    }

    protected Phone getPhone() {
        return this.mPhone;
    }

    public void handleMessage(Message msg) {
        if (this.mPhone.mIsTheCurrentActivePhone) {
            AsyncResult ar;
            switch (msg.what) {
                case PduPersister.PROC_STATUS_TRANSIENT_FAILURE /*1*/:
                    setPowerStateToDesired();
                    pollState();
                    return;
                case PduPersister.PROC_STATUS_PERMANENTLY_FAILURE /*2*/:
                    pollState();
                    return;
                case PduPersister.PROC_STATUS_COMPLETED /*3*/:
                    if (this.mCi.getRadioState().isOn()) {
                        onSignalStrengthResult(msg.obj, true);
                        queueNextSignalStrengthPoll();
                        return;
                    }
                    return;
                case CharacterSets.ISO_8859_1 /*4*/:
                case CharacterSets.ISO_8859_2 /*5*/:
                case CharacterSets.ISO_8859_3 /*6*/:
                case SmsHeader.ELT_ID_LARGE_ANIMATION /*14*/:
                    handlePollStateResult(msg.what, (AsyncResult) msg.obj);
                    return;
                case CharacterSets.ISO_8859_7 /*10*/:
                    this.mCi.getSignalStrength(obtainMessage(3));
                    return;
                case CharacterSets.ISO_8859_8 /*11*/:
                    ar = (AsyncResult) msg.obj;
                    setTimeFromNITZString(((Object[]) ar.result)[0], ((Long) ((Object[]) ar.result)[1]).longValue());
                    return;
                case CharacterSets.ISO_8859_9 /*12*/:
                    ar = (AsyncResult) msg.obj;
                    this.mDontPollSignalStrength = true;
                    onSignalStrengthResult(ar, true);
                    return;
                case UserData.ASCII_CR_INDEX /*13*/:
                    return;
                case SignalToneUtil.IS95_CONST_IR_SIG_ISDN_OFF /*15*/:
                    ar = (AsyncResult) msg.obj;
                    if (ar.exception == null) {
                        String[] states = (String[]) ar.result;
                        int lac = -1;
                        int cid = -1;
                        if (states.length >= 3) {
                            try {
                                if (states[1] != null && states[1].length() > 0) {
                                    lac = Integer.parseInt(states[1], 16);
                                }
                                if (states[2] != null && states[2].length() > 0) {
                                    cid = Integer.parseInt(states[2], 16);
                                }
                            } catch (NumberFormatException ex) {
                                Rlog.w(LOG_TAG, "error parsing location: " + ex);
                            }
                        }
                        this.mCellLoc.setLacAndCid(lac, cid);
                        this.mPhone.notifyLocationChanged();
                    }
                    disableSingleLocationUpdate();
                    return;
                case PduHeaders.MMS_VERSION_1_0 /*16*/:
                    log("EVENT_SIM_RECORDS_LOADED: what=" + msg.what);
                    this.mPhone.notifyOtaspChanged(3);
                    updatePhoneObject();
                    updateSpnDisplay();
                    return;
                case PduHeaders.MMS_VERSION_1_1 /*17*/:
                    this.mOnSubscriptionsChangedListener.mPreviousSubId.set(-1);
                    pollState();
                    queueNextSignalStrengthPoll();
                    return;
                case PduHeaders.MMS_VERSION_1_2 /*18*/:
                    if (((AsyncResult) msg.obj).exception == null) {
                        this.mCi.getVoiceRegistrationState(obtainMessage(15, null));
                        return;
                    }
                    return;
                case PduHeaders.MMS_VERSION_1_3 /*19*/:
                    ar = (AsyncResult) msg.obj;
                    if (ar.exception == null) {
                        this.mPreferredNetworkType = ((int[]) ar.result)[0];
                    } else {
                        this.mPreferredNetworkType = 7;
                    }
                    this.mCi.setPreferredNetworkType(7, obtainMessage(20, ar.userObj));
                    return;
                case SmsHeader.ELT_ID_EXTENDED_OBJECT /*20*/:
                    this.mCi.setPreferredNetworkType(this.mPreferredNetworkType, obtainMessage(21, ((AsyncResult) msg.obj).userObj));
                    return;
                case SmsHeader.ELT_ID_REUSED_EXTENDED_OBJECT /*21*/:
                    ar = (AsyncResult) msg.obj;
                    if (ar.userObj != null) {
                        AsyncResult.forMessage((Message) ar.userObj).exception = ar.exception;
                        ((Message) ar.userObj).sendToTarget();
                        return;
                    }
                    return;
                case CallFailCause.NUMBER_CHANGED /*22*/:
                    if (!(this.mSS == null || isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState()))) {
                        GsmCellLocation loc = (GsmCellLocation) this.mPhone.getCellLocation();
                        r16 = new Object[2];
                        r16[0] = this.mSS.getOperatorNumeric();
                        r16[1] = Integer.valueOf(loc != null ? loc.getCid() : -1);
                        EventLog.writeEvent(EventLogTags.DATA_NETWORK_REGISTRATION_FAIL, r16);
                        this.mReportedGprsNoReg = true;
                    }
                    this.mStartedGprsRegCheck = VDBG;
                    return;
                case SmsHeader.ELT_ID_OBJECT_DISTR_INDICATOR /*23*/:
                    log("EVENT_RESTRICTED_STATE_CHANGED");
                    onRestrictedStateChanged((AsyncResult) msg.obj);
                    return;
                case 45:
                    log("EVENT_CHANGE_IMS_STATE:");
                    setPowerStateToDesired();
                    return;
                case PS_ENABLED /*1001*/:
                    ProxyController.getInstance().unregisterForAllDataDisconnected(SubscriptionManager.getDefaultDataSubId(), this);
                    synchronized (this) {
                        if (!this.mPendingRadioPowerOffAfterDataOff) {
                            log("EVENT_ALL_DATA_DISCONNECTED is stale");
                            break;
                        }
                        log("EVENT_ALL_DATA_DISCONNECTED, turn radio off now.");
                        hangupAndPowerOff();
                        this.mPendingRadioPowerOffAfterDataOff = VDBG;
                        break;
                    }
                    return;
                default:
                    super.handleMessage(msg);
                    return;
            }
        }
        Rlog.e(LOG_TAG, "Received message " + msg + "[" + msg.what + "] while being destroyed. Ignoring.");
    }

    protected void setPowerStateToDesired() {
        log("mDeviceShuttingDown = " + this.mDeviceShuttingDown);
        log("mDesiredPowerState = " + this.mDesiredPowerState);
        log("getRadioState = " + this.mCi.getRadioState());
        log("mPowerOffDelayNeed = " + this.mPowerOffDelayNeed);
        log("mAlarmSwitch = " + this.mAlarmSwitch);
        if (this.mAlarmSwitch) {
            log("mAlarmSwitch == true");
            ((AlarmManager) this.mPhone.getContext().getSystemService("alarm")).cancel(this.mRadioOffIntent);
            this.mAlarmSwitch = VDBG;
        }
        if (this.mDesiredPowerState && this.mCi.getRadioState() == RadioState.RADIO_OFF) {
            this.mCi.setRadioPower(true, null);
        } else if (this.mDesiredPowerState || !this.mCi.getRadioState().isOn()) {
            if (this.mDeviceShuttingDown && this.mCi.getRadioState().isAvailable()) {
                this.mCi.requestShutdown(null);
            }
        } else if (!this.mPowerOffDelayNeed) {
            powerOffRadioSafely(this.mPhone.mDcTracker);
        } else if (!this.mImsRegistrationOnOff || this.mAlarmSwitch) {
            powerOffRadioSafely(this.mPhone.mDcTracker);
        } else {
            log("mImsRegistrationOnOff == true");
            Context context = this.mPhone.getContext();
            AlarmManager am = (AlarmManager) context.getSystemService("alarm");
            this.mRadioOffIntent = PendingIntent.getBroadcast(context, 0, new Intent("android.intent.action.ACTION_RADIO_OFF"), 0);
            this.mAlarmSwitch = true;
            log("Alarm setting");
            am.set(2, SystemClock.elapsedRealtime() + 3000, this.mRadioOffIntent);
        }
    }

    protected void hangupAndPowerOff() {
        if (this.mPhone.isInCall()) {
            this.mPhone.mCT.mRingingCall.hangupIfAlive();
            this.mPhone.mCT.mBackgroundCall.hangupIfAlive();
            this.mPhone.mCT.mForegroundCall.hangupIfAlive();
        }
        this.mCi.setRadioPower(VDBG, null);
    }

    protected void updateSpnDisplay() {
        int rule;
        boolean showPlmn;
        String plmn;
        boolean showSpn;
        IccRecords iccRecords = this.mIccRecords;
        if (iccRecords != null) {
            rule = iccRecords.getDisplayRule(this.mSS.getOperatorNumeric());
        } else {
            rule = 0;
        }
        if (this.mSS.getVoiceRegState() == 1 || this.mSS.getVoiceRegState() == 2) {
            showPlmn = true;
            if (this.mEmergencyOnly) {
                plmn = Resources.getSystem().getText(17040294).toString();
            } else {
                plmn = Resources.getSystem().getText(17040270).toString();
            }
            log("updateSpnDisplay: radio is on but out of service, set plmn='" + plmn + "'");
        } else if (this.mSS.getVoiceRegState() == 0) {
            plmn = this.mSS.getOperatorAlphaLong();
            showPlmn = (TextUtils.isEmpty(plmn) || (rule & 2) != 2) ? VDBG : true;
        } else {
            showPlmn = true;
            plmn = Resources.getSystem().getText(17040270).toString();
            log("updateSpnDisplay: radio is off w/ showPlmn=" + true + " plmn=" + plmn);
        }
        String spn = iccRecords != null ? iccRecords.getServiceProviderName() : "";
        if (TextUtils.isEmpty(spn) || (rule & 1) != 1) {
            showSpn = VDBG;
        } else {
            showSpn = true;
        }
        if (this.mSS.getVoiceRegState() == 3 || (showPlmn && TextUtils.equals(spn, plmn))) {
            spn = null;
            showSpn = VDBG;
        }
        if (!(showPlmn == this.mCurShowPlmn && showSpn == this.mCurShowSpn && TextUtils.equals(spn, this.mCurSpn) && TextUtils.equals(plmn, this.mCurPlmn))) {
            log(String.format("updateSpnDisplay: changed sending intent rule=" + rule + " showPlmn='%b' plmn='%s' showSpn='%b' spn='%s'", new Object[]{Boolean.valueOf(showPlmn), plmn, Boolean.valueOf(showSpn), spn}));
            Intent intent = new Intent("android.provider.Telephony.SPN_STRINGS_UPDATED");
            intent.addFlags(536870912);
            intent.putExtra("showSpn", showSpn);
            intent.putExtra("spn", spn);
            intent.putExtra("showPlmn", showPlmn);
            intent.putExtra(CellBroadcasts.PLMN, plmn);
            SubscriptionManager.putPhoneIdAndSubIdExtra(intent, this.mPhone.getPhoneId());
            this.mPhone.getContext().sendStickyBroadcastAsUser(intent, UserHandle.ALL);
            if (!this.mSubscriptionController.setPlmnSpn(this.mPhone.getPhoneId(), showPlmn, plmn, showSpn, spn)) {
                this.mSpnUpdatePending = true;
            }
        }
        this.mCurShowSpn = showSpn;
        this.mCurShowPlmn = showPlmn;
        this.mCurSpn = spn;
        this.mCurPlmn = plmn;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    protected void handlePollStateResult(int r22, android.os.AsyncResult r23) {
        /*
        r21 = this;
        r0 = r23;
        r0 = r0.userObj;
        r17 = r0;
        r0 = r21;
        r0 = r0.mPollingContext;
        r18 = r0;
        r0 = r17;
        r1 = r18;
        if (r0 == r1) goto L_0x0013;
    L_0x0012:
        return;
    L_0x0013:
        r0 = r23;
        r0 = r0.exception;
        r17 = r0;
        if (r17 == 0) goto L_0x0121;
    L_0x001b:
        r5 = 0;
        r0 = r23;
        r0 = r0.exception;
        r17 = r0;
        r0 = r17;
        r0 = r0 instanceof com.android.internal.telephony.CommandException;
        r17 = r0;
        if (r17 == 0) goto L_0x0038;
    L_0x002a:
        r0 = r23;
        r0 = r0.exception;
        r17 = r0;
        r17 = (com.android.internal.telephony.CommandException) r17;
        r17 = (com.android.internal.telephony.CommandException) r17;
        r5 = r17.getCommandError();
    L_0x0038:
        r17 = com.android.internal.telephony.CommandException.Error.RADIO_NOT_AVAILABLE;
        r0 = r17;
        if (r5 != r0) goto L_0x0042;
    L_0x003e:
        r21.cancelPollState();
        goto L_0x0012;
    L_0x0042:
        r0 = r21;
        r0 = r0.mCi;
        r17 = r0;
        r17 = r17.getRadioState();
        r17 = r17.isOn();
        if (r17 != 0) goto L_0x0056;
    L_0x0052:
        r21.cancelPollState();
        goto L_0x0012;
    L_0x0056:
        r17 = com.android.internal.telephony.CommandException.Error.OP_NOT_ALLOWED_BEFORE_REG_NW;
        r0 = r17;
        if (r5 == r0) goto L_0x007c;
    L_0x005c:
        r17 = new java.lang.StringBuilder;
        r17.<init>();
        r18 = "RIL implementation has returned an error where it must succeed";
        r17 = r17.append(r18);
        r0 = r23;
        r0 = r0.exception;
        r18 = r0;
        r17 = r17.append(r18);
        r17 = r17.toString();
        r0 = r21;
        r1 = r17;
        r0.loge(r1);
    L_0x007c:
        r0 = r21;
        r0 = r0.mPollingContext;
        r17 = r0;
        r18 = 0;
        r19 = r17[r18];
        r19 = r19 + -1;
        r17[r18] = r19;
        r0 = r21;
        r0 = r0.mPollingContext;
        r17 = r0;
        r18 = 0;
        r17 = r17[r18];
        if (r17 != 0) goto L_0x0012;
    L_0x0096:
        r0 = r21;
        r0 = r0.mGsmRoaming;
        r17 = r0;
        if (r17 != 0) goto L_0x00a6;
    L_0x009e:
        r0 = r21;
        r0 = r0.mDataRoaming;
        r17 = r0;
        if (r17 == 0) goto L_0x045f;
    L_0x00a6:
        r14 = 1;
    L_0x00a7:
        r0 = r21;
        r0 = r0.mGsmRoaming;
        r17 = r0;
        if (r17 == 0) goto L_0x00e0;
    L_0x00af:
        r0 = r21;
        r0 = r0.mNewSS;
        r17 = r0;
        r0 = r21;
        r1 = r17;
        r17 = r0.isOperatorConsideredRoaming(r1);
        if (r17 != 0) goto L_0x00e0;
    L_0x00bf:
        r0 = r21;
        r0 = r0.mNewSS;
        r17 = r0;
        r0 = r21;
        r1 = r17;
        r17 = r0.isSameNamedOperators(r1);
        if (r17 != 0) goto L_0x00df;
    L_0x00cf:
        r0 = r21;
        r0 = r0.mNewSS;
        r17 = r0;
        r0 = r21;
        r1 = r17;
        r17 = r0.isOperatorConsideredNonRoaming(r1);
        if (r17 == 0) goto L_0x00e0;
    L_0x00df:
        r14 = 0;
    L_0x00e0:
        r0 = r21;
        r0 = r0.mPhone;
        r17 = r0;
        r0 = r21;
        r0 = r0.mNewSS;
        r18 = r0;
        r18 = r18.getOperatorNumeric();
        r17 = r17.isMccMncMarkedAsNonRoaming(r18);
        if (r17 == 0) goto L_0x0462;
    L_0x00f6:
        r14 = 0;
    L_0x00f7:
        r0 = r21;
        r0 = r0.mNewSS;
        r17 = r0;
        r0 = r17;
        r0.setVoiceRoaming(r14);
        r0 = r21;
        r0 = r0.mNewSS;
        r17 = r0;
        r0 = r17;
        r0.setDataRoaming(r14);
        r0 = r21;
        r0 = r0.mNewSS;
        r17 = r0;
        r0 = r21;
        r0 = r0.mEmergencyOnly;
        r18 = r0;
        r17.setEmergencyOnly(r18);
        r21.pollStateDone();
        goto L_0x0012;
    L_0x0121:
        switch(r22) {
            case 4: goto L_0x0126;
            case 5: goto L_0x0282;
            case 6: goto L_0x0380;
            case 14: goto L_0x0406;
            default: goto L_0x0124;
        };
    L_0x0124:
        goto L_0x007c;
    L_0x0126:
        r0 = r23;
        r0 = r0.result;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r17 = (java.lang.String[]) r17;	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r0 = (java.lang.String[]) r0;	 Catch:{ RuntimeException -> 0x023b }
        r15 = r0;
        r9 = -1;
        r3 = -1;
        r16 = 0;
        r13 = 4;
        r12 = -1;
        r11 = -1;
        r0 = r15.length;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        if (r17 <= 0) goto L_0x01c4;
    L_0x013f:
        r17 = 0;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r13 = java.lang.Integer.parseInt(r17);	 Catch:{ NumberFormatException -> 0x025a }
        r0 = r15.length;	 Catch:{ NumberFormatException -> 0x025a }
        r17 = r0;
        r18 = 3;
        r0 = r17;
        r1 = r18;
        if (r0 < r1) goto L_0x019f;
    L_0x0152:
        r17 = 1;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        if (r17 == 0) goto L_0x016c;
    L_0x0158:
        r17 = 1;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r17 = r17.length();	 Catch:{ NumberFormatException -> 0x025a }
        if (r17 <= 0) goto L_0x016c;
    L_0x0162:
        r17 = 1;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r18 = 16;
        r9 = java.lang.Integer.parseInt(r17, r18);	 Catch:{ NumberFormatException -> 0x025a }
    L_0x016c:
        r17 = 2;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        if (r17 == 0) goto L_0x0186;
    L_0x0172:
        r17 = 2;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r17 = r17.length();	 Catch:{ NumberFormatException -> 0x025a }
        if (r17 <= 0) goto L_0x0186;
    L_0x017c:
        r17 = 2;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r18 = 16;
        r3 = java.lang.Integer.parseInt(r17, r18);	 Catch:{ NumberFormatException -> 0x025a }
    L_0x0186:
        r0 = r15.length;	 Catch:{ NumberFormatException -> 0x025a }
        r17 = r0;
        r18 = 4;
        r0 = r17;
        r1 = r18;
        if (r0 < r1) goto L_0x019f;
    L_0x0191:
        r17 = 3;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        if (r17 == 0) goto L_0x019f;
    L_0x0197:
        r17 = 3;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r16 = java.lang.Integer.parseInt(r17);	 Catch:{ NumberFormatException -> 0x025a }
    L_0x019f:
        r0 = r15.length;	 Catch:{ NumberFormatException -> 0x025a }
        r17 = r0;
        r18 = 14;
        r0 = r17;
        r1 = r18;
        if (r0 <= r1) goto L_0x01c4;
    L_0x01aa:
        r17 = 14;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        if (r17 == 0) goto L_0x01c4;
    L_0x01b0:
        r17 = 14;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r17 = r17.length();	 Catch:{ NumberFormatException -> 0x025a }
        if (r17 <= 0) goto L_0x01c4;
    L_0x01ba:
        r17 = 14;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x025a }
        r18 = 16;
        r11 = java.lang.Integer.parseInt(r17, r18);	 Catch:{ NumberFormatException -> 0x025a }
    L_0x01c4:
        r0 = r21;
        r17 = r0.regCodeIsRoaming(r13);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r1 = r21;
        r1.mGsmRoaming = r0;	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r0 = r0.mNewSS;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r0 = r21;
        r18 = r0.regCodeToServiceState(r13);	 Catch:{ RuntimeException -> 0x023b }
        r17.setState(r18);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r0 = r0.mNewSS;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r0 = r17;
        r1 = r16;
        r0.setRilVoiceRadioTechnology(r1);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r0 = r0.mPhoneBase;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r17 = r17.getContext();	 Catch:{ RuntimeException -> 0x023b }
        r17 = r17.getResources();	 Catch:{ RuntimeException -> 0x023b }
        r18 = 17956946; // 0x1120052 float:2.6816195E-38 double:8.87191E-317;
        r8 = r17.getBoolean(r18);	 Catch:{ RuntimeException -> 0x023b }
        r17 = 13;
        r0 = r17;
        if (r13 == r0) goto L_0x0219;
    L_0x0207:
        r17 = 10;
        r0 = r17;
        if (r13 == r0) goto L_0x0219;
    L_0x020d:
        r17 = 12;
        r0 = r17;
        if (r13 == r0) goto L_0x0219;
    L_0x0213:
        r17 = 14;
        r0 = r17;
        if (r13 != r0) goto L_0x0279;
    L_0x0219:
        if (r8 == 0) goto L_0x0279;
    L_0x021b:
        r17 = 1;
        r0 = r17;
        r1 = r21;
        r1.mEmergencyOnly = r0;	 Catch:{ RuntimeException -> 0x023b }
    L_0x0223:
        r0 = r21;
        r0 = r0.mNewCellLoc;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r0 = r17;
        r0.setLacAndCid(r9, r3);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r0 = r0.mNewCellLoc;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r0 = r17;
        r0.setPsc(r11);	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x007c;
    L_0x023b:
        r6 = move-exception;
        r17 = new java.lang.StringBuilder;
        r17.<init>();
        r18 = "Exception while polling service state. Probably malformed RIL response.";
        r17 = r17.append(r18);
        r0 = r17;
        r17 = r0.append(r6);
        r17 = r17.toString();
        r0 = r21;
        r1 = r17;
        r0.loge(r1);
        goto L_0x007c;
    L_0x025a:
        r6 = move-exception;
        r17 = new java.lang.StringBuilder;	 Catch:{ RuntimeException -> 0x023b }
        r17.<init>();	 Catch:{ RuntimeException -> 0x023b }
        r18 = "error parsing RegistrationState: ";
        r17 = r17.append(r18);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r17 = r0.append(r6);	 Catch:{ RuntimeException -> 0x023b }
        r17 = r17.toString();	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r1 = r17;
        r0.loge(r1);	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x01c4;
    L_0x0279:
        r17 = 0;
        r0 = r17;
        r1 = r21;
        r1.mEmergencyOnly = r0;	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x0223;
    L_0x0282:
        r0 = r23;
        r0 = r0.result;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r17 = (java.lang.String[]) r17;	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r0 = (java.lang.String[]) r0;	 Catch:{ RuntimeException -> 0x023b }
        r15 = r0;
        r16 = 0;
        r13 = 4;
        r17 = -1;
        r0 = r17;
        r1 = r21;
        r1.mNewReasonDataDenied = r0;	 Catch:{ RuntimeException -> 0x023b }
        r17 = 1;
        r0 = r17;
        r1 = r21;
        r1.mNewMaxDataCalls = r0;	 Catch:{ RuntimeException -> 0x023b }
        r0 = r15.length;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        if (r17 <= 0) goto L_0x0300;
    L_0x02a7:
        r17 = 0;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x0362 }
        r13 = java.lang.Integer.parseInt(r17);	 Catch:{ NumberFormatException -> 0x0362 }
        r0 = r15.length;	 Catch:{ NumberFormatException -> 0x0362 }
        r17 = r0;
        r18 = 4;
        r0 = r17;
        r1 = r18;
        if (r0 < r1) goto L_0x02c8;
    L_0x02ba:
        r17 = 3;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x0362 }
        if (r17 == 0) goto L_0x02c8;
    L_0x02c0:
        r17 = 3;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x0362 }
        r16 = java.lang.Integer.parseInt(r17);	 Catch:{ NumberFormatException -> 0x0362 }
    L_0x02c8:
        r0 = r15.length;	 Catch:{ NumberFormatException -> 0x0362 }
        r17 = r0;
        r18 = 5;
        r0 = r17;
        r1 = r18;
        if (r0 < r1) goto L_0x02e7;
    L_0x02d3:
        r17 = 3;
        r0 = r17;
        if (r13 != r0) goto L_0x02e7;
    L_0x02d9:
        r17 = 4;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x0362 }
        r17 = java.lang.Integer.parseInt(r17);	 Catch:{ NumberFormatException -> 0x0362 }
        r0 = r17;
        r1 = r21;
        r1.mNewReasonDataDenied = r0;	 Catch:{ NumberFormatException -> 0x0362 }
    L_0x02e7:
        r0 = r15.length;	 Catch:{ NumberFormatException -> 0x0362 }
        r17 = r0;
        r18 = 6;
        r0 = r17;
        r1 = r18;
        if (r0 < r1) goto L_0x0300;
    L_0x02f2:
        r17 = 5;
        r17 = r15[r17];	 Catch:{ NumberFormatException -> 0x0362 }
        r17 = java.lang.Integer.parseInt(r17);	 Catch:{ NumberFormatException -> 0x0362 }
        r0 = r17;
        r1 = r21;
        r1.mNewMaxDataCalls = r0;	 Catch:{ NumberFormatException -> 0x0362 }
    L_0x0300:
        r0 = r21;
        r4 = r0.regCodeToServiceState(r13);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r0 = r0.mNewSS;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r0 = r17;
        r0.setDataRegState(r4);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r17 = r0.regCodeIsRoaming(r13);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r1 = r21;
        r1.mDataRoaming = r0;	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r0 = r0.mNewSS;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r0 = r17;
        r1 = r16;
        r0.setRilDataRadioTechnology(r1);	 Catch:{ RuntimeException -> 0x023b }
        r17 = new java.lang.StringBuilder;	 Catch:{ RuntimeException -> 0x023b }
        r17.<init>();	 Catch:{ RuntimeException -> 0x023b }
        r18 = "handlPollStateResultMessage: GsmSST setDataRegState=";
        r17 = r17.append(r18);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r17 = r0.append(r4);	 Catch:{ RuntimeException -> 0x023b }
        r18 = " regState=";
        r17 = r17.append(r18);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r17 = r0.append(r13);	 Catch:{ RuntimeException -> 0x023b }
        r18 = " dataRadioTechnology=";
        r17 = r17.append(r18);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r1 = r16;
        r17 = r0.append(r1);	 Catch:{ RuntimeException -> 0x023b }
        r17 = r17.toString();	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r1 = r17;
        r0.log(r1);	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x007c;
    L_0x0362:
        r6 = move-exception;
        r17 = new java.lang.StringBuilder;	 Catch:{ RuntimeException -> 0x023b }
        r17.<init>();	 Catch:{ RuntimeException -> 0x023b }
        r18 = "error parsing GprsRegistrationState: ";
        r17 = r17.append(r18);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r17 = r0.append(r6);	 Catch:{ RuntimeException -> 0x023b }
        r17 = r17.toString();	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r1 = r17;
        r0.loge(r1);	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x0300;
    L_0x0380:
        r0 = r23;
        r0 = r0.result;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r17 = (java.lang.String[]) r17;	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r0 = (java.lang.String[]) r0;	 Catch:{ RuntimeException -> 0x023b }
        r10 = r0;
        if (r10 == 0) goto L_0x007c;
    L_0x038f:
        r0 = r10.length;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r18 = 3;
        r0 = r17;
        r1 = r18;
        if (r0 < r1) goto L_0x007c;
    L_0x039a:
        r0 = r21;
        r0 = r0.mUiccController;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r18 = r21.getPhoneId();	 Catch:{ RuntimeException -> 0x023b }
        r17 = r17.getUiccCard(r18);	 Catch:{ RuntimeException -> 0x023b }
        if (r17 == 0) goto L_0x03ed;
    L_0x03aa:
        r0 = r21;
        r0 = r0.mUiccController;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r18 = r21.getPhoneId();	 Catch:{ RuntimeException -> 0x023b }
        r17 = r17.getUiccCard(r18);	 Catch:{ RuntimeException -> 0x023b }
        r2 = r17.getOperatorBrandOverride();	 Catch:{ RuntimeException -> 0x023b }
    L_0x03bc:
        if (r2 == 0) goto L_0x03ef;
    L_0x03be:
        r17 = new java.lang.StringBuilder;	 Catch:{ RuntimeException -> 0x023b }
        r17.<init>();	 Catch:{ RuntimeException -> 0x023b }
        r18 = "EVENT_POLL_STATE_OPERATOR: use brandOverride=";
        r17 = r17.append(r18);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r17 = r0.append(r2);	 Catch:{ RuntimeException -> 0x023b }
        r17 = r17.toString();	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r1 = r17;
        r0.log(r1);	 Catch:{ RuntimeException -> 0x023b }
        r0 = r21;
        r0 = r0.mNewSS;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r18 = 2;
        r18 = r10[r18];	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r1 = r18;
        r0.setOperatorName(r2, r2, r1);	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x007c;
    L_0x03ed:
        r2 = 0;
        goto L_0x03bc;
    L_0x03ef:
        r0 = r21;
        r0 = r0.mNewSS;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r18 = 0;
        r18 = r10[r18];	 Catch:{ RuntimeException -> 0x023b }
        r19 = 1;
        r19 = r10[r19];	 Catch:{ RuntimeException -> 0x023b }
        r20 = 2;
        r20 = r10[r20];	 Catch:{ RuntimeException -> 0x023b }
        r17.setOperatorName(r18, r19, r20);	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x007c;
    L_0x0406:
        r0 = r23;
        r0 = r0.result;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r17 = (int[]) r17;	 Catch:{ RuntimeException -> 0x023b }
        r0 = r17;
        r0 = (int[]) r0;	 Catch:{ RuntimeException -> 0x023b }
        r7 = r0;
        r0 = r21;
        r0 = r0.mNewSS;	 Catch:{ RuntimeException -> 0x023b }
        r18 = r0;
        r17 = 0;
        r17 = r7[r17];	 Catch:{ RuntimeException -> 0x023b }
        r19 = 1;
        r0 = r17;
        r1 = r19;
        if (r0 != r1) goto L_0x045c;
    L_0x0425:
        r17 = 1;
    L_0x0427:
        r0 = r18;
        r1 = r17;
        r0.setIsManualSelection(r1);	 Catch:{ RuntimeException -> 0x023b }
        r17 = 0;
        r17 = r7[r17];	 Catch:{ RuntimeException -> 0x023b }
        r18 = 1;
        r0 = r17;
        r1 = r18;
        if (r0 != r1) goto L_0x007c;
    L_0x043a:
        r0 = r21;
        r0 = r0.mPhone;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r17 = r17.isManualNetSelAllowed();	 Catch:{ RuntimeException -> 0x023b }
        if (r17 != 0) goto L_0x007c;
    L_0x0446:
        r0 = r21;
        r0 = r0.mPhone;	 Catch:{ RuntimeException -> 0x023b }
        r17 = r0;
        r18 = 0;
        r17.setNetworkSelectionModeAutomatic(r18);	 Catch:{ RuntimeException -> 0x023b }
        r17 = " Forcing Automatic Network Selection, manual selection is not allowed";
        r0 = r21;
        r1 = r17;
        r0.log(r1);	 Catch:{ RuntimeException -> 0x023b }
        goto L_0x007c;
    L_0x045c:
        r17 = 0;
        goto L_0x0427;
    L_0x045f:
        r14 = 0;
        goto L_0x00a7;
    L_0x0462:
        r0 = r21;
        r0 = r0.mPhone;
        r17 = r0;
        r0 = r21;
        r0 = r0.mNewSS;
        r18 = r0;
        r18 = r18.getOperatorNumeric();
        r17 = r17.isMccMncMarkedAsRoaming(r18);
        if (r17 == 0) goto L_0x00f7;
    L_0x0478:
        r14 = 1;
        goto L_0x00f7;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.internal.telephony.gsm.GsmServiceStateTracker.handlePollStateResult(int, android.os.AsyncResult):void");
    }

    protected void setRoamingType(ServiceState currentServiceState) {
        boolean isVoiceInService;
        boolean isDataInService;
        if (currentServiceState.getVoiceRegState() == 0) {
            isVoiceInService = true;
        } else {
            isVoiceInService = VDBG;
        }
        if (isVoiceInService) {
            if (!currentServiceState.getVoiceRoaming()) {
                currentServiceState.setVoiceRoamingType(0);
            } else if (inSameCountry(currentServiceState.getVoiceOperatorNumeric())) {
                currentServiceState.setVoiceRoamingType(2);
            } else {
                currentServiceState.setVoiceRoamingType(3);
            }
        }
        if (currentServiceState.getDataRegState() == 0) {
            isDataInService = true;
        } else {
            isDataInService = VDBG;
        }
        int dataRegType = currentServiceState.getRilDataRadioTechnology();
        if (!isDataInService) {
            return;
        }
        if (!currentServiceState.getDataRoaming()) {
            currentServiceState.setDataRoamingType(0);
        } else if (!ServiceState.isGsm(dataRegType)) {
            currentServiceState.setDataRoamingType(1);
        } else if (isVoiceInService) {
            currentServiceState.setDataRoamingType(currentServiceState.getVoiceRoamingType());
        } else {
            currentServiceState.setDataRoamingType(1);
        }
    }

    private void setSignalStrengthDefaultValues() {
        this.mSignalStrength = new SignalStrength(true);
    }

    public void pollState() {
        this.mPollingContext = new int[1];
        this.mPollingContext[0] = 0;
        switch (C00724.f9x46dd5024[this.mCi.getRadioState().ordinal()]) {
            case PduPersister.PROC_STATUS_TRANSIENT_FAILURE /*1*/:
                this.mNewSS.setStateOutOfService();
                this.mNewCellLoc.setStateInvalid();
                setSignalStrengthDefaultValues();
                this.mGotCountryCode = VDBG;
                this.mNitzUpdatedTime = VDBG;
                pollStateDone();
            case PduPersister.PROC_STATUS_PERMANENTLY_FAILURE /*2*/:
                this.mNewSS.setStateOff();
                this.mNewCellLoc.setStateInvalid();
                setSignalStrengthDefaultValues();
                this.mGotCountryCode = VDBG;
                this.mNitzUpdatedTime = VDBG;
                pollStateDone();
            default:
                int[] iArr = this.mPollingContext;
                iArr[0] = iArr[0] + 1;
                this.mCi.getOperator(obtainMessage(6, this.mPollingContext));
                iArr = this.mPollingContext;
                iArr[0] = iArr[0] + 1;
                this.mCi.getDataRegistrationState(obtainMessage(5, this.mPollingContext));
                iArr = this.mPollingContext;
                iArr[0] = iArr[0] + 1;
                this.mCi.getVoiceRegistrationState(obtainMessage(4, this.mPollingContext));
                iArr = this.mPollingContext;
                iArr[0] = iArr[0] + 1;
                this.mCi.getNetworkSelectionMode(obtainMessage(14, this.mPollingContext));
        }
    }

    private void pollStateDone() {
        boolean hasRegistered;
        boolean hasGprsAttached;
        boolean hasGprsDetached;
        boolean hasDataRegStateChanged;
        boolean hasVoiceRegStateChanged;
        boolean hasRilVoiceRadioTechnologyChanged;
        boolean hasRilDataRadioTechnologyChanged;
        boolean hasChanged;
        boolean hasVoiceRoamingOn;
        boolean hasVoiceRoamingOff;
        boolean hasDataRoamingOn;
        boolean hasDataRoamingOff;
        boolean hasLocationChanged;
        TelephonyManager tm;
        Object[] objArr;
        int cid;
        GsmCellLocation loc;
        ServiceState tss;
        GsmCellLocation tcl;
        String prevOperatorNumeric;
        String operatorNumeric;
        String iso;
        String mcc;
        boolean testOneUniqueOffsetPath;
        ArrayList<TimeZone> uniqueZones;
        TimeZone zone;
        String zoneName;
        long ctm;
        long tzOffset;
        long adj;
        log("Poll ServiceState done:  oldSS=[" + this.mSS + "] newSS=[" + this.mNewSS + "]" + " oldMaxDataCalls=" + this.mMaxDataCalls + " mNewMaxDataCalls=" + this.mNewMaxDataCalls + " oldReasonDataDenied=" + this.mReasonDataDenied + " mNewReasonDataDenied=" + this.mNewReasonDataDenied);
        if (Build.IS_DEBUGGABLE && SystemProperties.getBoolean("telephony.test.forceRoaming", VDBG)) {
            this.mNewSS.setVoiceRoaming(true);
            this.mNewSS.setDataRoaming(true);
        }
        useDataRegStateForDataOnlyDevices();
        if (this.mSS.getVoiceRegState() != 0) {
            if (this.mNewSS.getVoiceRegState() == 0) {
                hasRegistered = true;
                if (this.mSS.getVoiceRegState() == 0) {
                    if (this.mNewSS.getVoiceRegState() != 0) {
                        if (this.mSS.getDataRegState() != 0) {
                            if (this.mNewSS.getDataRegState() == 0) {
                                hasGprsAttached = true;
                                if (this.mSS.getDataRegState() == 0) {
                                    if (this.mNewSS.getDataRegState() != 0) {
                                        hasGprsDetached = true;
                                        hasDataRegStateChanged = this.mSS.getDataRegState() == this.mNewSS.getDataRegState() ? true : VDBG;
                                        hasVoiceRegStateChanged = this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState() ? true : VDBG;
                                        hasRilVoiceRadioTechnologyChanged = this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology() ? true : VDBG;
                                        hasRilDataRadioTechnologyChanged = this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology() ? true : VDBG;
                                        hasChanged = this.mNewSS.equals(this.mSS) ? true : VDBG;
                                        if (!this.mSS.getVoiceRoaming()) {
                                            if (this.mNewSS.getVoiceRoaming()) {
                                                hasVoiceRoamingOn = true;
                                                if (this.mSS.getVoiceRoaming()) {
                                                    if (!this.mNewSS.getVoiceRoaming()) {
                                                        hasVoiceRoamingOff = true;
                                                        if (!this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOn = true;
                                                                if (this.mSS.getDataRoaming()) {
                                                                    if (!this.mNewSS.getDataRoaming()) {
                                                                        hasDataRoamingOff = true;
                                                                        hasLocationChanged = this.mNewCellLoc.equals(this.mCellLoc) ? true : VDBG;
                                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                        if (hasVoiceRegStateChanged || hasDataRegStateChanged) {
                                                                            objArr = new Object[4];
                                                                            objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                            objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                            objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                            objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                            EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                        }
                                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                                            cid = -1;
                                                                            loc = this.mNewCellLoc;
                                                                            if (loc != null) {
                                                                                cid = loc.getCid();
                                                                            }
                                                                            objArr = new Object[3];
                                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                        }
                                                                        tss = this.mSS;
                                                                        this.mSS = this.mNewSS;
                                                                        this.mNewSS = tss;
                                                                        this.mNewSS.setStateOutOfService();
                                                                        tcl = this.mCellLoc;
                                                                        this.mCellLoc = this.mNewCellLoc;
                                                                        this.mNewCellLoc = tcl;
                                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                                            updatePhoneObject();
                                                                        }
                                                                        if (hasRilDataRadioTechnologyChanged) {
                                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                        }
                                                                        if (hasRegistered) {
                                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                            this.mNitzUpdatedTime = VDBG;
                                                                        }
                                                                        if (hasChanged) {
                                                                            updateSpnDisplay();
                                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                            if (operatorNumeric != null) {
                                                                                log("operatorNumeric is null");
                                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                                this.mGotCountryCode = VDBG;
                                                                                this.mNitzUpdatedTime = VDBG;
                                                                            } else {
                                                                                iso = "";
                                                                                mcc = "";
                                                                                try {
                                                                                    mcc = operatorNumeric.substring(0, 3);
                                                                                    iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                                } catch (NumberFormatException ex) {
                                                                                    loge("pollStateDone: countryCodeForMcc error" + ex);
                                                                                } catch (StringIndexOutOfBoundsException ex2) {
                                                                                    loge("pollStateDone: countryCodeForMcc error" + ex2);
                                                                                }
                                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                                this.mGotCountryCode = true;
                                                                                if (!this.mNitzUpdatedTime) {
                                                                                    if (!(mcc.equals("000") || TextUtils.isEmpty(iso) || !getAutoTimeZone())) {
                                                                                        testOneUniqueOffsetPath = (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG) || (SystemClock.uptimeMillis() & 1) != 0) ? VDBG : true;
                                                                                        uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                                        if (uniqueZones.size() != 1 || testOneUniqueOffsetPath) {
                                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                        } else {
                                                                                            log("pollStateDone: there are " + uniqueZones.size() + " unique offsets for iso-cc='" + iso + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath + "', do nothing");
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                                    if ("".equals(iso) || !this.mNeedFixZoneAfterNitz) {
                                                                                        if (this.mZoneOffset == 0 && !this.mZoneDst && zoneName != null && zoneName.length() > 0) {
                                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                                zone = TimeZone.getDefault();
                                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                                    ctm = System.currentTimeMillis();
                                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                                    if (getAutoTime()) {
                                                                                                        this.mSavedTime -= tzOffset;
                                                                                                    } else {
                                                                                                        adj = ctm - tzOffset;
                                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                                    }
                                                                                                }
                                                                                                log("pollStateDone: using default TimeZone");
                                                                                            }
                                                                                        }
                                                                                        zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                                        log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                                    } else {
                                                                                        zone = getNitzTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime);
                                                                                        log("pollStateDone: using NITZ TimeZone");
                                                                                    }
                                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                                    if (zone != null) {
                                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                        if (getAutoTimeZone()) {
                                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                        }
                                                                                        saveNitzTimeZone(zone.getID());
                                                                                    } else {
                                                                                        log("pollStateDone: zone == null");
                                                                                    }
                                                                                }
                                                                            }
                                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                            setRoamingType(this.mSS);
                                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                        }
                                                                        if (hasGprsAttached) {
                                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                                        }
                                                                        if (hasGprsDetached) {
                                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                                        }
                                                                        if (hasDataRegStateChanged || hasRilDataRadioTechnologyChanged) {
                                                                            notifyDataRegStateRilRadioTechnologyChanged();
                                                                            this.mPhone.notifyDataConnection(null);
                                                                        }
                                                                        if (hasVoiceRoamingOn) {
                                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                        }
                                                                        if (hasVoiceRoamingOff) {
                                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                        }
                                                                        if (hasDataRoamingOn) {
                                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                        }
                                                                        if (hasDataRoamingOff) {
                                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                        }
                                                                        if (hasLocationChanged) {
                                                                            this.mPhone.notifyLocationChanged();
                                                                        }
                                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                            this.mReportedGprsNoReg = VDBG;
                                                                        } else if (!this.mStartedGprsRegCheck && !this.mReportedGprsNoReg) {
                                                                            this.mStartedGprsRegCheck = true;
                                                                            sendMessageDelayed(obtainMessage(22), (long) Global.getInt(this.mPhone.getContext().getContentResolver(), "gprs_register_check_period_ms", ServiceStateTracker.DEFAULT_GPRS_CHECK_PERIOD_MILLIS));
                                                                            return;
                                                                        }
                                                                    }
                                                                }
                                                                hasDataRoamingOff = VDBG;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    } else {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    } else {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOn = VDBG;
                                                        if (this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOff = true;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    } else {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    } else {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOff = VDBG;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                this.mSavedTime -= tzOffset;
                                                                            } else {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            } else {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasVoiceRoamingOff = VDBG;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOn = true;
                                                        if (this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOff = true;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    } else {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    } else {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOff = VDBG;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                this.mSavedTime -= tzOffset;
                                                                            } else {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            } else {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOn = VDBG;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasVoiceRoamingOn = VDBG;
                                        if (this.mSS.getVoiceRoaming()) {
                                            if (this.mNewSS.getVoiceRoaming()) {
                                                hasVoiceRoamingOff = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOn = true;
                                                        if (this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOff = true;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    } else {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    } else {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOff = VDBG;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                this.mSavedTime -= tzOffset;
                                                                            } else {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            } else {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOn = VDBG;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasVoiceRoamingOff = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasGprsDetached = VDBG;
                                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                                }
                                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                                }
                                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                                }
                                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                                }
                                if (this.mNewSS.equals(this.mSS)) {
                                }
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOn = true;
                                        if (this.mSS.getVoiceRoaming()) {
                                            if (this.mNewSS.getVoiceRoaming()) {
                                                hasVoiceRoamingOff = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOn = true;
                                                        if (this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOff = true;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    } else {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    } else {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOff = VDBG;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                this.mSavedTime -= tzOffset;
                                                                            } else {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            } else {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOn = VDBG;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasVoiceRoamingOff = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOn = VDBG;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasGprsAttached = VDBG;
                        if (this.mSS.getDataRegState() == 0) {
                            if (this.mNewSS.getDataRegState() != 0) {
                                hasGprsDetached = true;
                                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                                }
                                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                                }
                                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                                }
                                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                                }
                                if (this.mNewSS.equals(this.mSS)) {
                                }
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOn = true;
                                        if (this.mSS.getVoiceRoaming()) {
                                            if (this.mNewSS.getVoiceRoaming()) {
                                                hasVoiceRoamingOff = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOn = true;
                                                        if (this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOff = true;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    } else {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    } else {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOff = VDBG;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                this.mSavedTime -= tzOffset;
                                                                            } else {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            } else {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOn = VDBG;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasVoiceRoamingOff = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOn = VDBG;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasGprsDetached = VDBG;
                        if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                        }
                        if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                        }
                        if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                        }
                        if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                        }
                        if (this.mNewSS.equals(this.mSS)) {
                        }
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOn = true;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOn = VDBG;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                if (this.mSS.getDataRegState() != 0) {
                    if (this.mNewSS.getDataRegState() == 0) {
                        hasGprsAttached = true;
                        if (this.mSS.getDataRegState() == 0) {
                            if (this.mNewSS.getDataRegState() != 0) {
                                hasGprsDetached = true;
                                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                                }
                                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                                }
                                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                                }
                                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                                }
                                if (this.mNewSS.equals(this.mSS)) {
                                }
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOn = true;
                                        if (this.mSS.getVoiceRoaming()) {
                                            if (this.mNewSS.getVoiceRoaming()) {
                                                hasVoiceRoamingOff = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOn = true;
                                                        if (this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOff = true;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    } else {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    } else {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOff = VDBG;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                this.mSavedTime -= tzOffset;
                                                                            } else {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            } else {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOn = VDBG;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasVoiceRoamingOff = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOn = VDBG;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasGprsDetached = VDBG;
                        if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                        }
                        if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                        }
                        if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                        }
                        if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                        }
                        if (this.mNewSS.equals(this.mSS)) {
                        }
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOn = true;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOn = VDBG;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasGprsAttached = VDBG;
                if (this.mSS.getDataRegState() == 0) {
                    if (this.mNewSS.getDataRegState() != 0) {
                        hasGprsDetached = true;
                        if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                        }
                        if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                        }
                        if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                        }
                        if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                        }
                        if (this.mNewSS.equals(this.mSS)) {
                        }
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOn = true;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOn = VDBG;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasGprsDetached = VDBG;
                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                }
                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                }
                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                }
                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                }
                if (this.mNewSS.equals(this.mSS)) {
                }
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOn = true;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOn = VDBG;
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOff = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOff = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOn = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOn = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOff = true;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            } else {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            } else {
                                                this.mSavedTime -= tzOffset;
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOff = VDBG;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        this.mSavedTime -= tzOffset;
                                    } else {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    } else {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        hasRegistered = VDBG;
        if (this.mSS.getVoiceRegState() == 0) {
            if (this.mNewSS.getVoiceRegState() != 0) {
                if (this.mSS.getDataRegState() != 0) {
                    if (this.mNewSS.getDataRegState() == 0) {
                        hasGprsAttached = true;
                        if (this.mSS.getDataRegState() == 0) {
                            if (this.mNewSS.getDataRegState() != 0) {
                                hasGprsDetached = true;
                                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                                }
                                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                                }
                                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                                }
                                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                                }
                                if (this.mNewSS.equals(this.mSS)) {
                                }
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOn = true;
                                        if (this.mSS.getVoiceRoaming()) {
                                            if (this.mNewSS.getVoiceRoaming()) {
                                                hasVoiceRoamingOff = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOn = true;
                                                        if (this.mSS.getDataRoaming()) {
                                                            if (this.mNewSS.getDataRoaming()) {
                                                                hasDataRoamingOff = true;
                                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                                }
                                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                                objArr = new Object[4];
                                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    cid = -1;
                                                                    loc = this.mNewCellLoc;
                                                                    if (loc != null) {
                                                                        cid = loc.getCid();
                                                                    }
                                                                    objArr = new Object[3];
                                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                                }
                                                                tss = this.mSS;
                                                                this.mSS = this.mNewSS;
                                                                this.mNewSS = tss;
                                                                this.mNewSS.setStateOutOfService();
                                                                tcl = this.mCellLoc;
                                                                this.mCellLoc = this.mNewCellLoc;
                                                                this.mNewCellLoc = tcl;
                                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                                    updatePhoneObject();
                                                                }
                                                                if (hasRilDataRadioTechnologyChanged) {
                                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                                }
                                                                if (hasRegistered) {
                                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                                    this.mNitzUpdatedTime = VDBG;
                                                                }
                                                                if (hasChanged) {
                                                                    updateSpnDisplay();
                                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                                    if (operatorNumeric != null) {
                                                                        log("operatorNumeric is null");
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                        this.mGotCountryCode = VDBG;
                                                                        this.mNitzUpdatedTime = VDBG;
                                                                    } else {
                                                                        iso = "";
                                                                        mcc = "";
                                                                        mcc = operatorNumeric.substring(0, 3);
                                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                        this.mGotCountryCode = true;
                                                                        if (this.mNitzUpdatedTime) {
                                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                            }
                                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                            if (uniqueZones.size() != 1) {
                                                                            }
                                                                            zone = (TimeZone) uniqueZones.get(0);
                                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                            if ("".equals(iso)) {
                                                                            }
                                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                                zone = TimeZone.getDefault();
                                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                                    ctm = System.currentTimeMillis();
                                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                                    if (getAutoTime()) {
                                                                                        adj = ctm - tzOffset;
                                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                                    } else {
                                                                                        this.mSavedTime -= tzOffset;
                                                                                    }
                                                                                }
                                                                                log("pollStateDone: using default TimeZone");
                                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                                if (zone != null) {
                                                                                    log("pollStateDone: zone == null");
                                                                                } else {
                                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                    if (getAutoTimeZone()) {
                                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                    }
                                                                                    saveNitzTimeZone(zone.getID());
                                                                                }
                                                                            }
                                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                                            if (zone != null) {
                                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                                if (getAutoTimeZone()) {
                                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                                }
                                                                                saveNitzTimeZone(zone.getID());
                                                                            } else {
                                                                                log("pollStateDone: zone == null");
                                                                            }
                                                                        }
                                                                    }
                                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                                    setRoamingType(this.mSS);
                                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                                }
                                                                if (hasGprsAttached) {
                                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasGprsDetached) {
                                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                                }
                                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                                this.mPhone.notifyDataConnection(null);
                                                                if (hasVoiceRoamingOn) {
                                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasVoiceRoamingOff) {
                                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOn) {
                                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasDataRoamingOff) {
                                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                                }
                                                                if (hasLocationChanged) {
                                                                    this.mPhone.notifyLocationChanged();
                                                                }
                                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                                    this.mReportedGprsNoReg = VDBG;
                                                                } else if (!this.mStartedGprsRegCheck) {
                                                                }
                                                            }
                                                        }
                                                        hasDataRoamingOff = VDBG;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                this.mSavedTime -= tzOffset;
                                                                            } else {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            } else {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOn = VDBG;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasVoiceRoamingOff = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOn = VDBG;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasGprsDetached = VDBG;
                        if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                        }
                        if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                        }
                        if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                        }
                        if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                        }
                        if (this.mNewSS.equals(this.mSS)) {
                        }
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOn = true;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOn = VDBG;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasGprsAttached = VDBG;
                if (this.mSS.getDataRegState() == 0) {
                    if (this.mNewSS.getDataRegState() != 0) {
                        hasGprsDetached = true;
                        if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                        }
                        if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                        }
                        if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                        }
                        if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                        }
                        if (this.mNewSS.equals(this.mSS)) {
                        }
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOn = true;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOn = VDBG;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasGprsDetached = VDBG;
                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                }
                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                }
                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                }
                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                }
                if (this.mNewSS.equals(this.mSS)) {
                }
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOn = true;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOn = VDBG;
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOff = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOff = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOn = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOn = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOff = true;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            } else {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            } else {
                                                this.mSavedTime -= tzOffset;
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOff = VDBG;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        this.mSavedTime -= tzOffset;
                                    } else {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    } else {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        if (this.mSS.getDataRegState() != 0) {
            if (this.mNewSS.getDataRegState() == 0) {
                hasGprsAttached = true;
                if (this.mSS.getDataRegState() == 0) {
                    if (this.mNewSS.getDataRegState() != 0) {
                        hasGprsDetached = true;
                        if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                        }
                        if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                        }
                        if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                        }
                        if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                        }
                        if (this.mNewSS.equals(this.mSS)) {
                        }
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOn = true;
                                if (this.mSS.getVoiceRoaming()) {
                                    if (this.mNewSS.getVoiceRoaming()) {
                                        hasVoiceRoamingOff = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOn = true;
                                                if (this.mSS.getDataRoaming()) {
                                                    if (this.mNewSS.getDataRoaming()) {
                                                        hasDataRoamingOff = true;
                                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                        }
                                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                        objArr = new Object[4];
                                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            cid = -1;
                                                            loc = this.mNewCellLoc;
                                                            if (loc != null) {
                                                                cid = loc.getCid();
                                                            }
                                                            objArr = new Object[3];
                                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                        }
                                                        tss = this.mSS;
                                                        this.mSS = this.mNewSS;
                                                        this.mNewSS = tss;
                                                        this.mNewSS.setStateOutOfService();
                                                        tcl = this.mCellLoc;
                                                        this.mCellLoc = this.mNewCellLoc;
                                                        this.mNewCellLoc = tcl;
                                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                        if (hasRilVoiceRadioTechnologyChanged) {
                                                            updatePhoneObject();
                                                        }
                                                        if (hasRilDataRadioTechnologyChanged) {
                                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                        }
                                                        if (hasRegistered) {
                                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                            this.mNitzUpdatedTime = VDBG;
                                                        }
                                                        if (hasChanged) {
                                                            updateSpnDisplay();
                                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                            if (operatorNumeric != null) {
                                                                log("operatorNumeric is null");
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                                this.mGotCountryCode = VDBG;
                                                                this.mNitzUpdatedTime = VDBG;
                                                            } else {
                                                                iso = "";
                                                                mcc = "";
                                                                mcc = operatorNumeric.substring(0, 3);
                                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                                this.mGotCountryCode = true;
                                                                if (this.mNitzUpdatedTime) {
                                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                                    }
                                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                                    if (uniqueZones.size() != 1) {
                                                                    }
                                                                    zone = (TimeZone) uniqueZones.get(0);
                                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                                    if ("".equals(iso)) {
                                                                    }
                                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                        zone = TimeZone.getDefault();
                                                                        if (this.mNeedFixZoneAfterNitz) {
                                                                            ctm = System.currentTimeMillis();
                                                                            tzOffset = (long) zone.getOffset(ctm);
                                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                            if (getAutoTime()) {
                                                                                adj = ctm - tzOffset;
                                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                                setAndBroadcastNetworkSetTime(adj);
                                                                            } else {
                                                                                this.mSavedTime -= tzOffset;
                                                                            }
                                                                        }
                                                                        log("pollStateDone: using default TimeZone");
                                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                                        if (zone != null) {
                                                                            log("pollStateDone: zone == null");
                                                                        } else {
                                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                            if (getAutoTimeZone()) {
                                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                            }
                                                                            saveNitzTimeZone(zone.getID());
                                                                        }
                                                                    }
                                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                                    if (zone != null) {
                                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                        if (getAutoTimeZone()) {
                                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                        }
                                                                        saveNitzTimeZone(zone.getID());
                                                                    } else {
                                                                        log("pollStateDone: zone == null");
                                                                    }
                                                                }
                                                            }
                                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                            setRoamingType(this.mSS);
                                                            log("Broadcasting ServiceState : " + this.mSS);
                                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                                        }
                                                        if (hasGprsAttached) {
                                                            this.mAttachedRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasGprsDetached) {
                                                            this.mDetachedRegistrants.notifyRegistrants();
                                                        }
                                                        notifyDataRegStateRilRadioTechnologyChanged();
                                                        this.mPhone.notifyDataConnection(null);
                                                        if (hasVoiceRoamingOn) {
                                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasVoiceRoamingOff) {
                                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOn) {
                                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasDataRoamingOff) {
                                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                        }
                                                        if (hasLocationChanged) {
                                                            this.mPhone.notifyLocationChanged();
                                                        }
                                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                            this.mReportedGprsNoReg = VDBG;
                                                        } else if (!this.mStartedGprsRegCheck) {
                                                        }
                                                    }
                                                }
                                                hasDataRoamingOff = VDBG;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        this.mSavedTime -= tzOffset;
                                                                    } else {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    } else {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOn = VDBG;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasVoiceRoamingOff = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOn = VDBG;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasGprsDetached = VDBG;
                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                }
                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                }
                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                }
                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                }
                if (this.mNewSS.equals(this.mSS)) {
                }
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOn = true;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOn = VDBG;
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOff = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOff = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOn = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOn = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOff = true;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            } else {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            } else {
                                                this.mSavedTime -= tzOffset;
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOff = VDBG;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        this.mSavedTime -= tzOffset;
                                    } else {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    } else {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        hasGprsAttached = VDBG;
        if (this.mSS.getDataRegState() == 0) {
            if (this.mNewSS.getDataRegState() != 0) {
                hasGprsDetached = true;
                if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
                }
                if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
                }
                if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
                }
                if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
                }
                if (this.mNewSS.equals(this.mSS)) {
                }
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOn = true;
                        if (this.mSS.getVoiceRoaming()) {
                            if (this.mNewSS.getVoiceRoaming()) {
                                hasVoiceRoamingOff = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOn = true;
                                        if (this.mSS.getDataRoaming()) {
                                            if (this.mNewSS.getDataRoaming()) {
                                                hasDataRoamingOff = true;
                                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                                }
                                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                                objArr = new Object[4];
                                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    cid = -1;
                                                    loc = this.mNewCellLoc;
                                                    if (loc != null) {
                                                        cid = loc.getCid();
                                                    }
                                                    objArr = new Object[3];
                                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                                }
                                                tss = this.mSS;
                                                this.mSS = this.mNewSS;
                                                this.mNewSS = tss;
                                                this.mNewSS.setStateOutOfService();
                                                tcl = this.mCellLoc;
                                                this.mCellLoc = this.mNewCellLoc;
                                                this.mNewCellLoc = tcl;
                                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                                if (hasRilVoiceRadioTechnologyChanged) {
                                                    updatePhoneObject();
                                                }
                                                if (hasRilDataRadioTechnologyChanged) {
                                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                                }
                                                if (hasRegistered) {
                                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                                    this.mNitzUpdatedTime = VDBG;
                                                }
                                                if (hasChanged) {
                                                    updateSpnDisplay();
                                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                                    if (operatorNumeric != null) {
                                                        log("operatorNumeric is null");
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                        this.mGotCountryCode = VDBG;
                                                        this.mNitzUpdatedTime = VDBG;
                                                    } else {
                                                        iso = "";
                                                        mcc = "";
                                                        mcc = operatorNumeric.substring(0, 3);
                                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                        this.mGotCountryCode = true;
                                                        if (this.mNitzUpdatedTime) {
                                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                            }
                                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                            if (uniqueZones.size() != 1) {
                                                            }
                                                            zone = (TimeZone) uniqueZones.get(0);
                                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                            if ("".equals(iso)) {
                                                            }
                                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                                zone = TimeZone.getDefault();
                                                                if (this.mNeedFixZoneAfterNitz) {
                                                                    ctm = System.currentTimeMillis();
                                                                    tzOffset = (long) zone.getOffset(ctm);
                                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                                    if (getAutoTime()) {
                                                                        adj = ctm - tzOffset;
                                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                        setAndBroadcastNetworkSetTime(adj);
                                                                    } else {
                                                                        this.mSavedTime -= tzOffset;
                                                                    }
                                                                }
                                                                log("pollStateDone: using default TimeZone");
                                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                                if (zone != null) {
                                                                    log("pollStateDone: zone == null");
                                                                } else {
                                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                    if (getAutoTimeZone()) {
                                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                    }
                                                                    saveNitzTimeZone(zone.getID());
                                                                }
                                                            }
                                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                            this.mNeedFixZoneAfterNitz = VDBG;
                                                            if (zone != null) {
                                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                                if (getAutoTimeZone()) {
                                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                                }
                                                                saveNitzTimeZone(zone.getID());
                                                            } else {
                                                                log("pollStateDone: zone == null");
                                                            }
                                                        }
                                                    }
                                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                                    setRoamingType(this.mSS);
                                                    log("Broadcasting ServiceState : " + this.mSS);
                                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                                }
                                                if (hasGprsAttached) {
                                                    this.mAttachedRegistrants.notifyRegistrants();
                                                }
                                                if (hasGprsDetached) {
                                                    this.mDetachedRegistrants.notifyRegistrants();
                                                }
                                                notifyDataRegStateRilRadioTechnologyChanged();
                                                this.mPhone.notifyDataConnection(null);
                                                if (hasVoiceRoamingOn) {
                                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasVoiceRoamingOff) {
                                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOn) {
                                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                                }
                                                if (hasDataRoamingOff) {
                                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                                }
                                                if (hasLocationChanged) {
                                                    this.mPhone.notifyLocationChanged();
                                                }
                                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                                    this.mReportedGprsNoReg = VDBG;
                                                } else if (!this.mStartedGprsRegCheck) {
                                                }
                                            }
                                        }
                                        hasDataRoamingOff = VDBG;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                this.mSavedTime -= tzOffset;
                                                            } else {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            } else {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOn = VDBG;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasVoiceRoamingOff = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOn = VDBG;
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOff = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOff = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOn = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOn = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOff = true;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            } else {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            } else {
                                                this.mSavedTime -= tzOffset;
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOff = VDBG;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        this.mSavedTime -= tzOffset;
                                    } else {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    } else {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        hasGprsDetached = VDBG;
        if (this.mSS.getDataRegState() == this.mNewSS.getDataRegState()) {
        }
        if (this.mSS.getVoiceRegState() == this.mNewSS.getVoiceRegState()) {
        }
        if (this.mSS.getRilVoiceRadioTechnology() == this.mNewSS.getRilVoiceRadioTechnology()) {
        }
        if (this.mSS.getRilDataRadioTechnology() == this.mNewSS.getRilDataRadioTechnology()) {
        }
        if (this.mNewSS.equals(this.mSS)) {
        }
        if (this.mSS.getVoiceRoaming()) {
            if (this.mNewSS.getVoiceRoaming()) {
                hasVoiceRoamingOn = true;
                if (this.mSS.getVoiceRoaming()) {
                    if (this.mNewSS.getVoiceRoaming()) {
                        hasVoiceRoamingOff = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOn = true;
                                if (this.mSS.getDataRoaming()) {
                                    if (this.mNewSS.getDataRoaming()) {
                                        hasDataRoamingOff = true;
                                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                        }
                                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                        objArr = new Object[4];
                                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            cid = -1;
                                            loc = this.mNewCellLoc;
                                            if (loc != null) {
                                                cid = loc.getCid();
                                            }
                                            objArr = new Object[3];
                                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                        }
                                        tss = this.mSS;
                                        this.mSS = this.mNewSS;
                                        this.mNewSS = tss;
                                        this.mNewSS.setStateOutOfService();
                                        tcl = this.mCellLoc;
                                        this.mCellLoc = this.mNewCellLoc;
                                        this.mNewCellLoc = tcl;
                                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                                        if (hasRilVoiceRadioTechnologyChanged) {
                                            updatePhoneObject();
                                        }
                                        if (hasRilDataRadioTechnologyChanged) {
                                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                        }
                                        if (hasRegistered) {
                                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                            this.mNitzUpdatedTime = VDBG;
                                        }
                                        if (hasChanged) {
                                            updateSpnDisplay();
                                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                            operatorNumeric = this.mSS.getOperatorNumeric();
                                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                            if (operatorNumeric != null) {
                                                log("operatorNumeric is null");
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                                this.mGotCountryCode = VDBG;
                                                this.mNitzUpdatedTime = VDBG;
                                            } else {
                                                iso = "";
                                                mcc = "";
                                                mcc = operatorNumeric.substring(0, 3);
                                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                                this.mGotCountryCode = true;
                                                if (this.mNitzUpdatedTime) {
                                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                                    }
                                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                                    if (uniqueZones.size() != 1) {
                                                    }
                                                    zone = (TimeZone) uniqueZones.get(0);
                                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                                    if ("".equals(iso)) {
                                                    }
                                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                        zone = TimeZone.getDefault();
                                                        if (this.mNeedFixZoneAfterNitz) {
                                                            ctm = System.currentTimeMillis();
                                                            tzOffset = (long) zone.getOffset(ctm);
                                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                            if (getAutoTime()) {
                                                                adj = ctm - tzOffset;
                                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                                setAndBroadcastNetworkSetTime(adj);
                                                            } else {
                                                                this.mSavedTime -= tzOffset;
                                                            }
                                                        }
                                                        log("pollStateDone: using default TimeZone");
                                                        this.mNeedFixZoneAfterNitz = VDBG;
                                                        if (zone != null) {
                                                            log("pollStateDone: zone == null");
                                                        } else {
                                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                            if (getAutoTimeZone()) {
                                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                            }
                                                            saveNitzTimeZone(zone.getID());
                                                        }
                                                    }
                                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                                    this.mNeedFixZoneAfterNitz = VDBG;
                                                    if (zone != null) {
                                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                        if (getAutoTimeZone()) {
                                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                        }
                                                        saveNitzTimeZone(zone.getID());
                                                    } else {
                                                        log("pollStateDone: zone == null");
                                                    }
                                                }
                                            }
                                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                            setRoamingType(this.mSS);
                                            log("Broadcasting ServiceState : " + this.mSS);
                                            this.mPhone.notifyServiceStateChanged(this.mSS);
                                        }
                                        if (hasGprsAttached) {
                                            this.mAttachedRegistrants.notifyRegistrants();
                                        }
                                        if (hasGprsDetached) {
                                            this.mDetachedRegistrants.notifyRegistrants();
                                        }
                                        notifyDataRegStateRilRadioTechnologyChanged();
                                        this.mPhone.notifyDataConnection(null);
                                        if (hasVoiceRoamingOn) {
                                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasVoiceRoamingOff) {
                                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOn) {
                                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                                        }
                                        if (hasDataRoamingOff) {
                                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                                        }
                                        if (hasLocationChanged) {
                                            this.mPhone.notifyLocationChanged();
                                        }
                                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                            this.mReportedGprsNoReg = VDBG;
                                        } else if (!this.mStartedGprsRegCheck) {
                                        }
                                    }
                                }
                                hasDataRoamingOff = VDBG;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        this.mSavedTime -= tzOffset;
                                                    } else {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    } else {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOn = VDBG;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasVoiceRoamingOff = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOn = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOn = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOff = true;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            } else {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            } else {
                                                this.mSavedTime -= tzOffset;
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOff = VDBG;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        this.mSavedTime -= tzOffset;
                                    } else {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    } else {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        hasVoiceRoamingOn = VDBG;
        if (this.mSS.getVoiceRoaming()) {
            if (this.mNewSS.getVoiceRoaming()) {
                hasVoiceRoamingOff = true;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOn = true;
                        if (this.mSS.getDataRoaming()) {
                            if (this.mNewSS.getDataRoaming()) {
                                hasDataRoamingOff = true;
                                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                                }
                                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                                objArr = new Object[4];
                                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    cid = -1;
                                    loc = this.mNewCellLoc;
                                    if (loc != null) {
                                        cid = loc.getCid();
                                    }
                                    objArr = new Object[3];
                                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                                }
                                tss = this.mSS;
                                this.mSS = this.mNewSS;
                                this.mNewSS = tss;
                                this.mNewSS.setStateOutOfService();
                                tcl = this.mCellLoc;
                                this.mCellLoc = this.mNewCellLoc;
                                this.mNewCellLoc = tcl;
                                this.mReasonDataDenied = this.mNewReasonDataDenied;
                                this.mMaxDataCalls = this.mNewMaxDataCalls;
                                if (hasRilVoiceRadioTechnologyChanged) {
                                    updatePhoneObject();
                                }
                                if (hasRilDataRadioTechnologyChanged) {
                                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                                }
                                if (hasRegistered) {
                                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                                    this.mNitzUpdatedTime = VDBG;
                                }
                                if (hasChanged) {
                                    updateSpnDisplay();
                                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                                    operatorNumeric = this.mSS.getOperatorNumeric();
                                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                                    if (operatorNumeric != null) {
                                        log("operatorNumeric is null");
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                        this.mGotCountryCode = VDBG;
                                        this.mNitzUpdatedTime = VDBG;
                                    } else {
                                        iso = "";
                                        mcc = "";
                                        mcc = operatorNumeric.substring(0, 3);
                                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                        this.mGotCountryCode = true;
                                        if (this.mNitzUpdatedTime) {
                                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                            }
                                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                            if (uniqueZones.size() != 1) {
                                            }
                                            zone = (TimeZone) uniqueZones.get(0);
                                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                            zoneName = SystemProperties.get("persist.sys.timezone");
                                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                            if ("".equals(iso)) {
                                            }
                                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                                zone = TimeZone.getDefault();
                                                if (this.mNeedFixZoneAfterNitz) {
                                                    ctm = System.currentTimeMillis();
                                                    tzOffset = (long) zone.getOffset(ctm);
                                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                                    if (getAutoTime()) {
                                                        adj = ctm - tzOffset;
                                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                        setAndBroadcastNetworkSetTime(adj);
                                                    } else {
                                                        this.mSavedTime -= tzOffset;
                                                    }
                                                }
                                                log("pollStateDone: using default TimeZone");
                                                this.mNeedFixZoneAfterNitz = VDBG;
                                                if (zone != null) {
                                                    log("pollStateDone: zone == null");
                                                } else {
                                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                    if (getAutoTimeZone()) {
                                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                    }
                                                    saveNitzTimeZone(zone.getID());
                                                }
                                            }
                                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                            this.mNeedFixZoneAfterNitz = VDBG;
                                            if (zone != null) {
                                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                                if (getAutoTimeZone()) {
                                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                                }
                                                saveNitzTimeZone(zone.getID());
                                            } else {
                                                log("pollStateDone: zone == null");
                                            }
                                        }
                                    }
                                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                                    setRoamingType(this.mSS);
                                    log("Broadcasting ServiceState : " + this.mSS);
                                    this.mPhone.notifyServiceStateChanged(this.mSS);
                                }
                                if (hasGprsAttached) {
                                    this.mAttachedRegistrants.notifyRegistrants();
                                }
                                if (hasGprsDetached) {
                                    this.mDetachedRegistrants.notifyRegistrants();
                                }
                                notifyDataRegStateRilRadioTechnologyChanged();
                                this.mPhone.notifyDataConnection(null);
                                if (hasVoiceRoamingOn) {
                                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasVoiceRoamingOff) {
                                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOn) {
                                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                                }
                                if (hasDataRoamingOff) {
                                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                                }
                                if (hasLocationChanged) {
                                    this.mPhone.notifyLocationChanged();
                                }
                                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                                    this.mReportedGprsNoReg = VDBG;
                                } else if (!this.mStartedGprsRegCheck) {
                                }
                            }
                        }
                        hasDataRoamingOff = VDBG;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                this.mSavedTime -= tzOffset;
                                            } else {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            } else {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOn = VDBG;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOff = true;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            } else {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            } else {
                                                this.mSavedTime -= tzOffset;
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOff = VDBG;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        this.mSavedTime -= tzOffset;
                                    } else {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    } else {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        hasVoiceRoamingOff = VDBG;
        if (this.mSS.getDataRoaming()) {
            if (this.mNewSS.getDataRoaming()) {
                hasDataRoamingOn = true;
                if (this.mSS.getDataRoaming()) {
                    if (this.mNewSS.getDataRoaming()) {
                        hasDataRoamingOff = true;
                        if (this.mNewCellLoc.equals(this.mCellLoc)) {
                        }
                        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                        objArr = new Object[4];
                        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                        if (hasRilVoiceRadioTechnologyChanged) {
                            cid = -1;
                            loc = this.mNewCellLoc;
                            if (loc != null) {
                                cid = loc.getCid();
                            }
                            objArr = new Object[3];
                            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                        }
                        tss = this.mSS;
                        this.mSS = this.mNewSS;
                        this.mNewSS = tss;
                        this.mNewSS.setStateOutOfService();
                        tcl = this.mCellLoc;
                        this.mCellLoc = this.mNewCellLoc;
                        this.mNewCellLoc = tcl;
                        this.mReasonDataDenied = this.mNewReasonDataDenied;
                        this.mMaxDataCalls = this.mNewMaxDataCalls;
                        if (hasRilVoiceRadioTechnologyChanged) {
                            updatePhoneObject();
                        }
                        if (hasRilDataRadioTechnologyChanged) {
                            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                        }
                        if (hasRegistered) {
                            this.mNetworkAttachedRegistrants.notifyRegistrants();
                            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                            this.mNitzUpdatedTime = VDBG;
                        }
                        if (hasChanged) {
                            updateSpnDisplay();
                            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                            operatorNumeric = this.mSS.getOperatorNumeric();
                            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                            if (operatorNumeric != null) {
                                log("operatorNumeric is null");
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                                this.mGotCountryCode = VDBG;
                                this.mNitzUpdatedTime = VDBG;
                            } else {
                                iso = "";
                                mcc = "";
                                mcc = operatorNumeric.substring(0, 3);
                                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                                this.mGotCountryCode = true;
                                if (this.mNitzUpdatedTime) {
                                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                                    }
                                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                                    if (uniqueZones.size() != 1) {
                                    }
                                    zone = (TimeZone) uniqueZones.get(0);
                                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                                    zoneName = SystemProperties.get("persist.sys.timezone");
                                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                                    if ("".equals(iso)) {
                                    }
                                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                        zone = TimeZone.getDefault();
                                        if (this.mNeedFixZoneAfterNitz) {
                                            ctm = System.currentTimeMillis();
                                            tzOffset = (long) zone.getOffset(ctm);
                                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                            if (getAutoTime()) {
                                                adj = ctm - tzOffset;
                                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                                setAndBroadcastNetworkSetTime(adj);
                                            } else {
                                                this.mSavedTime -= tzOffset;
                                            }
                                        }
                                        log("pollStateDone: using default TimeZone");
                                        this.mNeedFixZoneAfterNitz = VDBG;
                                        if (zone != null) {
                                            log("pollStateDone: zone == null");
                                        } else {
                                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                            if (getAutoTimeZone()) {
                                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                                            }
                                            saveNitzTimeZone(zone.getID());
                                        }
                                    }
                                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                                    this.mNeedFixZoneAfterNitz = VDBG;
                                    if (zone != null) {
                                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                        if (getAutoTimeZone()) {
                                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                                        }
                                        saveNitzTimeZone(zone.getID());
                                    } else {
                                        log("pollStateDone: zone == null");
                                    }
                                }
                            }
                            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                            setRoamingType(this.mSS);
                            log("Broadcasting ServiceState : " + this.mSS);
                            this.mPhone.notifyServiceStateChanged(this.mSS);
                        }
                        if (hasGprsAttached) {
                            this.mAttachedRegistrants.notifyRegistrants();
                        }
                        if (hasGprsDetached) {
                            this.mDetachedRegistrants.notifyRegistrants();
                        }
                        notifyDataRegStateRilRadioTechnologyChanged();
                        this.mPhone.notifyDataConnection(null);
                        if (hasVoiceRoamingOn) {
                            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasVoiceRoamingOff) {
                            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOn) {
                            this.mDataRoamingOnRegistrants.notifyRegistrants();
                        }
                        if (hasDataRoamingOff) {
                            this.mDataRoamingOffRegistrants.notifyRegistrants();
                        }
                        if (hasLocationChanged) {
                            this.mPhone.notifyLocationChanged();
                        }
                        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                            this.mReportedGprsNoReg = VDBG;
                        } else if (!this.mStartedGprsRegCheck) {
                        }
                    }
                }
                hasDataRoamingOff = VDBG;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        this.mSavedTime -= tzOffset;
                                    } else {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    } else {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        hasDataRoamingOn = VDBG;
        if (this.mSS.getDataRoaming()) {
            if (this.mNewSS.getDataRoaming()) {
                hasDataRoamingOff = true;
                if (this.mNewCellLoc.equals(this.mCellLoc)) {
                }
                tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
                objArr = new Object[4];
                objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
                objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
                objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
                objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
                EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
                if (hasRilVoiceRadioTechnologyChanged) {
                    cid = -1;
                    loc = this.mNewCellLoc;
                    if (loc != null) {
                        cid = loc.getCid();
                    }
                    objArr = new Object[3];
                    objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
                    objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
                    EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
                    log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
                }
                tss = this.mSS;
                this.mSS = this.mNewSS;
                this.mNewSS = tss;
                this.mNewSS.setStateOutOfService();
                tcl = this.mCellLoc;
                this.mCellLoc = this.mNewCellLoc;
                this.mNewCellLoc = tcl;
                this.mReasonDataDenied = this.mNewReasonDataDenied;
                this.mMaxDataCalls = this.mNewMaxDataCalls;
                if (hasRilVoiceRadioTechnologyChanged) {
                    updatePhoneObject();
                }
                if (hasRilDataRadioTechnologyChanged) {
                    tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
                }
                if (hasRegistered) {
                    this.mNetworkAttachedRegistrants.notifyRegistrants();
                    log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
                    this.mNitzUpdatedTime = VDBG;
                }
                if (hasChanged) {
                    updateSpnDisplay();
                    tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
                    prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
                    operatorNumeric = this.mSS.getOperatorNumeric();
                    tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
                    updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
                    if (operatorNumeric != null) {
                        log("operatorNumeric is null");
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                        this.mGotCountryCode = VDBG;
                        this.mNitzUpdatedTime = VDBG;
                    } else {
                        iso = "";
                        mcc = "";
                        mcc = operatorNumeric.substring(0, 3);
                        iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                        tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                        this.mGotCountryCode = true;
                        if (this.mNitzUpdatedTime) {
                            if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                            }
                            uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                            if (uniqueZones.size() != 1) {
                            }
                            zone = (TimeZone) uniqueZones.get(0);
                            log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                            zoneName = SystemProperties.get("persist.sys.timezone");
                            log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                            if ("".equals(iso)) {
                            }
                            if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                                zone = TimeZone.getDefault();
                                if (this.mNeedFixZoneAfterNitz) {
                                    ctm = System.currentTimeMillis();
                                    tzOffset = (long) zone.getOffset(ctm);
                                    log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                                    if (getAutoTime()) {
                                        adj = ctm - tzOffset;
                                        log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                        setAndBroadcastNetworkSetTime(adj);
                                    } else {
                                        this.mSavedTime -= tzOffset;
                                    }
                                }
                                log("pollStateDone: using default TimeZone");
                                this.mNeedFixZoneAfterNitz = VDBG;
                                if (zone != null) {
                                    log("pollStateDone: zone == null");
                                } else {
                                    log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                    if (getAutoTimeZone()) {
                                        setAndBroadcastNetworkSetTimeZone(zone.getID());
                                    }
                                    saveNitzTimeZone(zone.getID());
                                }
                            }
                            zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                            log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                            this.mNeedFixZoneAfterNitz = VDBG;
                            if (zone != null) {
                                log("pollStateDone: zone != null zone.getID=" + zone.getID());
                                if (getAutoTimeZone()) {
                                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                                }
                                saveNitzTimeZone(zone.getID());
                            } else {
                                log("pollStateDone: zone == null");
                            }
                        }
                    }
                    tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
                    setRoamingType(this.mSS);
                    log("Broadcasting ServiceState : " + this.mSS);
                    this.mPhone.notifyServiceStateChanged(this.mSS);
                }
                if (hasGprsAttached) {
                    this.mAttachedRegistrants.notifyRegistrants();
                }
                if (hasGprsDetached) {
                    this.mDetachedRegistrants.notifyRegistrants();
                }
                notifyDataRegStateRilRadioTechnologyChanged();
                this.mPhone.notifyDataConnection(null);
                if (hasVoiceRoamingOn) {
                    this.mVoiceRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasVoiceRoamingOff) {
                    this.mVoiceRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOn) {
                    this.mDataRoamingOnRegistrants.notifyRegistrants();
                }
                if (hasDataRoamingOff) {
                    this.mDataRoamingOffRegistrants.notifyRegistrants();
                }
                if (hasLocationChanged) {
                    this.mPhone.notifyLocationChanged();
                }
                if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
                    this.mReportedGprsNoReg = VDBG;
                } else if (!this.mStartedGprsRegCheck) {
                }
            }
        }
        hasDataRoamingOff = VDBG;
        if (this.mNewCellLoc.equals(this.mCellLoc)) {
        }
        tm = (TelephonyManager) this.mPhone.getContext().getSystemService("phone");
        objArr = new Object[4];
        objArr[0] = Integer.valueOf(this.mSS.getVoiceRegState());
        objArr[1] = Integer.valueOf(this.mSS.getDataRegState());
        objArr[2] = Integer.valueOf(this.mNewSS.getVoiceRegState());
        objArr[3] = Integer.valueOf(this.mNewSS.getDataRegState());
        EventLog.writeEvent(EventLogTags.GSM_SERVICE_STATE_CHANGE, objArr);
        if (hasRilVoiceRadioTechnologyChanged) {
            cid = -1;
            loc = this.mNewCellLoc;
            if (loc != null) {
                cid = loc.getCid();
            }
            objArr = new Object[3];
            objArr[1] = Integer.valueOf(this.mSS.getRilVoiceRadioTechnology());
            objArr[2] = Integer.valueOf(this.mNewSS.getRilVoiceRadioTechnology());
            EventLog.writeEvent(EventLogTags.GSM_RAT_SWITCHED_NEW, objArr);
            log("RAT switched " + ServiceState.rilRadioTechnologyToString(this.mSS.getRilVoiceRadioTechnology()) + " -> " + ServiceState.rilRadioTechnologyToString(this.mNewSS.getRilVoiceRadioTechnology()) + " at cell " + cid);
        }
        tss = this.mSS;
        this.mSS = this.mNewSS;
        this.mNewSS = tss;
        this.mNewSS.setStateOutOfService();
        tcl = this.mCellLoc;
        this.mCellLoc = this.mNewCellLoc;
        this.mNewCellLoc = tcl;
        this.mReasonDataDenied = this.mNewReasonDataDenied;
        this.mMaxDataCalls = this.mNewMaxDataCalls;
        if (hasRilVoiceRadioTechnologyChanged) {
            updatePhoneObject();
        }
        if (hasRilDataRadioTechnologyChanged) {
            tm.setDataNetworkTypeForPhone(this.mPhone.getPhoneId(), this.mSS.getRilVoiceRadioTechnology());
        }
        if (hasRegistered) {
            this.mNetworkAttachedRegistrants.notifyRegistrants();
            log("pollStateDone: registering current mNitzUpdatedTime=" + this.mNitzUpdatedTime + " changing to false");
            this.mNitzUpdatedTime = VDBG;
        }
        if (hasChanged) {
            updateSpnDisplay();
            tm.setNetworkOperatorNameForPhone(this.mPhone.getPhoneId(), this.mSS.getOperatorAlphaLong());
            prevOperatorNumeric = tm.getNetworkOperatorForPhone(this.mPhone.getPhoneId());
            operatorNumeric = this.mSS.getOperatorNumeric();
            tm.setNetworkOperatorNumericForPhone(this.mPhone.getPhoneId(), operatorNumeric);
            updateCarrierMccMncConfiguration(operatorNumeric, prevOperatorNumeric, this.mPhone.getContext());
            if (operatorNumeric != null) {
                iso = "";
                mcc = "";
                mcc = operatorNumeric.substring(0, 3);
                iso = MccTable.countryCodeForMcc(Integer.parseInt(mcc));
                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), iso);
                this.mGotCountryCode = true;
                if (this.mNitzUpdatedTime) {
                    if (SystemProperties.getBoolean("telephony.test.ignore.nitz", VDBG)) {
                    }
                    uniqueZones = TimeUtils.getTimeZonesWithUniqueOffsets(iso);
                    if (uniqueZones.size() != 1) {
                    }
                    zone = (TimeZone) uniqueZones.get(0);
                    log("pollStateDone: no nitz but one TZ for iso-cc=" + iso + " with zone.getID=" + zone.getID() + " testOneUniqueOffsetPath=" + testOneUniqueOffsetPath);
                    setAndBroadcastNetworkSetTimeZone(zone.getID());
                }
                if (shouldFixTimeZoneNow(this.mPhone, operatorNumeric, prevOperatorNumeric, this.mNeedFixZoneAfterNitz)) {
                    zoneName = SystemProperties.get("persist.sys.timezone");
                    log("pollStateDone: fix time zone zoneName='" + zoneName + "' mZoneOffset=" + this.mZoneOffset + " mZoneDst=" + this.mZoneDst + " iso-cc='" + iso + "' iso-cc-idx=" + Arrays.binarySearch(GMT_COUNTRY_CODES, iso));
                    if ("".equals(iso)) {
                    }
                    if (Arrays.binarySearch(GMT_COUNTRY_CODES, iso) < 0) {
                        zone = TimeZone.getDefault();
                        if (this.mNeedFixZoneAfterNitz) {
                            ctm = System.currentTimeMillis();
                            tzOffset = (long) zone.getOffset(ctm);
                            log("pollStateDone: tzOffset=" + tzOffset + " ltod=" + TimeUtils.logTimeOfDay(ctm));
                            if (getAutoTime()) {
                                this.mSavedTime -= tzOffset;
                            } else {
                                adj = ctm - tzOffset;
                                log("pollStateDone: adj ltod=" + TimeUtils.logTimeOfDay(adj));
                                setAndBroadcastNetworkSetTime(adj);
                            }
                        }
                        log("pollStateDone: using default TimeZone");
                        this.mNeedFixZoneAfterNitz = VDBG;
                        if (zone != null) {
                            log("pollStateDone: zone == null");
                        } else {
                            log("pollStateDone: zone != null zone.getID=" + zone.getID());
                            if (getAutoTimeZone()) {
                                setAndBroadcastNetworkSetTimeZone(zone.getID());
                            }
                            saveNitzTimeZone(zone.getID());
                        }
                    }
                    zone = TimeUtils.getTimeZone(this.mZoneOffset, this.mZoneDst, this.mZoneTime, iso);
                    log("pollStateDone: using getTimeZone(off, dst, time, iso)");
                    this.mNeedFixZoneAfterNitz = VDBG;
                    if (zone != null) {
                        log("pollStateDone: zone != null zone.getID=" + zone.getID());
                        if (getAutoTimeZone()) {
                            setAndBroadcastNetworkSetTimeZone(zone.getID());
                        }
                        saveNitzTimeZone(zone.getID());
                    } else {
                        log("pollStateDone: zone == null");
                    }
                }
            } else {
                log("operatorNumeric is null");
                tm.setNetworkCountryIsoForPhone(this.mPhone.getPhoneId(), "");
                this.mGotCountryCode = VDBG;
                this.mNitzUpdatedTime = VDBG;
            }
            tm.setNetworkRoamingForPhone(this.mPhone.getPhoneId(), this.mSS.getVoiceRoaming());
            setRoamingType(this.mSS);
            log("Broadcasting ServiceState : " + this.mSS);
            this.mPhone.notifyServiceStateChanged(this.mSS);
        }
        if (hasGprsAttached) {
            this.mAttachedRegistrants.notifyRegistrants();
        }
        if (hasGprsDetached) {
            this.mDetachedRegistrants.notifyRegistrants();
        }
        notifyDataRegStateRilRadioTechnologyChanged();
        this.mPhone.notifyDataConnection(null);
        if (hasVoiceRoamingOn) {
            this.mVoiceRoamingOnRegistrants.notifyRegistrants();
        }
        if (hasVoiceRoamingOff) {
            this.mVoiceRoamingOffRegistrants.notifyRegistrants();
        }
        if (hasDataRoamingOn) {
            this.mDataRoamingOnRegistrants.notifyRegistrants();
        }
        if (hasDataRoamingOff) {
            this.mDataRoamingOffRegistrants.notifyRegistrants();
        }
        if (hasLocationChanged) {
            this.mPhone.notifyLocationChanged();
        }
        if (isGprsConsistent(this.mSS.getDataRegState(), this.mSS.getVoiceRegState())) {
            this.mReportedGprsNoReg = VDBG;
        } else if (!this.mStartedGprsRegCheck) {
        }
    }

    private boolean isGprsConsistent(int dataRegState, int voiceRegState) {
        return (voiceRegState != 0 || dataRegState == 0) ? true : VDBG;
    }

    private TimeZone getNitzTimeZone(int offset, boolean dst, long when) {
        TimeZone guess = findTimeZone(offset, dst, when);
        if (guess == null) {
            guess = findTimeZone(offset, !dst ? true : VDBG, when);
        }
        log("getNitzTimeZone returning " + (guess == null ? guess : guess.getID()));
        return guess;
    }

    private TimeZone findTimeZone(int offset, boolean dst, long when) {
        int rawOffset = offset;
        if (dst) {
            rawOffset -= 3600000;
        }
        String[] zones = TimeZone.getAvailableIDs(rawOffset);
        Date d = new Date(when);
        for (String zone : zones) {
            TimeZone tz = TimeZone.getTimeZone(zone);
            if (tz.getOffset(when) == offset && tz.inDaylightTime(d) == dst) {
                return tz;
            }
        }
        return null;
    }

    private void queueNextSignalStrengthPoll() {
        if (!this.mDontPollSignalStrength) {
            Message msg = obtainMessage();
            msg.what = 10;
            sendMessageDelayed(msg, 20000);
        }
    }

    private void onRestrictedStateChanged(AsyncResult ar) {
        boolean z = true;
        RestrictedState newRs = new RestrictedState();
        log("onRestrictedStateChanged: E rs " + this.mRestrictedState);
        if (ar.exception == null) {
            boolean z2;
            int state = ((int[]) ar.result)[0];
            if ((state & 1) == 0 && (state & 4) == 0) {
                z2 = VDBG;
            } else {
                z2 = true;
            }
            newRs.setCsEmergencyRestricted(z2);
            if (this.mUiccApplcation != null && this.mUiccApplcation.getState() == AppState.APPSTATE_READY) {
                if ((state & 2) == 0 && (state & 4) == 0) {
                    z2 = VDBG;
                } else {
                    z2 = true;
                }
                newRs.setCsNormalRestricted(z2);
                if ((state & 16) == 0) {
                    z = VDBG;
                }
                newRs.setPsRestricted(z);
            }
            log("onRestrictedStateChanged: new rs " + newRs);
            if (!this.mRestrictedState.isPsRestricted() && newRs.isPsRestricted()) {
                this.mPsRestrictEnabledRegistrants.notifyRegistrants();
                setNotification(PS_ENABLED);
            } else if (this.mRestrictedState.isPsRestricted() && !newRs.isPsRestricted()) {
                this.mPsRestrictDisabledRegistrants.notifyRegistrants();
                setNotification(PS_DISABLED);
            }
            if (this.mRestrictedState.isCsRestricted()) {
                if (!newRs.isCsRestricted()) {
                    setNotification(CS_DISABLED);
                } else if (!newRs.isCsNormalRestricted()) {
                    setNotification(CS_EMERGENCY_ENABLED);
                } else if (!newRs.isCsEmergencyRestricted()) {
                    setNotification(CS_NORMAL_ENABLED);
                }
            } else if (!this.mRestrictedState.isCsEmergencyRestricted() || this.mRestrictedState.isCsNormalRestricted()) {
                if (this.mRestrictedState.isCsEmergencyRestricted() || !this.mRestrictedState.isCsNormalRestricted()) {
                    if (newRs.isCsRestricted()) {
                        setNotification(CS_ENABLED);
                    } else if (newRs.isCsEmergencyRestricted()) {
                        setNotification(CS_EMERGENCY_ENABLED);
                    } else if (newRs.isCsNormalRestricted()) {
                        setNotification(CS_NORMAL_ENABLED);
                    }
                } else if (!newRs.isCsRestricted()) {
                    setNotification(CS_DISABLED);
                } else if (newRs.isCsRestricted()) {
                    setNotification(CS_ENABLED);
                } else if (newRs.isCsEmergencyRestricted()) {
                    setNotification(CS_EMERGENCY_ENABLED);
                }
            } else if (!newRs.isCsRestricted()) {
                setNotification(CS_DISABLED);
            } else if (newRs.isCsRestricted()) {
                setNotification(CS_ENABLED);
            } else if (newRs.isCsNormalRestricted()) {
                setNotification(CS_NORMAL_ENABLED);
            }
            this.mRestrictedState = newRs;
        }
        log("onRestrictedStateChanged: X rs " + this.mRestrictedState);
    }

    private int regCodeToServiceState(int code) {
        switch (code) {
            case CharacterSets.ANY_CHARSET /*0*/:
            case PduPersister.PROC_STATUS_PERMANENTLY_FAILURE /*2*/:
            case PduPersister.PROC_STATUS_COMPLETED /*3*/:
            case CharacterSets.ISO_8859_1 /*4*/:
            case CharacterSets.ISO_8859_7 /*10*/:
            case CharacterSets.ISO_8859_9 /*12*/:
            case UserData.ASCII_CR_INDEX /*13*/:
            case SmsHeader.ELT_ID_LARGE_ANIMATION /*14*/:
                return 1;
            case PduPersister.PROC_STATUS_TRANSIENT_FAILURE /*1*/:
                return 0;
            case CharacterSets.ISO_8859_2 /*5*/:
                return 0;
            default:
                loge("regCodeToServiceState: unexpected service state " + code);
                return 1;
        }
    }

    private boolean regCodeIsRoaming(int code) {
        return 5 == code ? true : VDBG;
    }

    private boolean isSameNamedOperators(ServiceState s) {
        String spn = ((TelephonyManager) this.mPhone.getContext().getSystemService("phone")).getSimOperatorNameForPhone(getPhoneId());
        String onsl = s.getOperatorAlphaLong();
        String onss = s.getOperatorAlphaShort();
        boolean equalsOnsl;
        if (onsl == null || !spn.equals(onsl)) {
            equalsOnsl = VDBG;
        } else {
            equalsOnsl = true;
        }
        boolean equalsOnss;
        if (onss == null || !spn.equals(onss)) {
            equalsOnss = VDBG;
        } else {
            equalsOnss = true;
        }
        if (currentMccEqualsSimMcc(s) && (equalsOnsl || equalsOnss)) {
            return true;
        }
        return VDBG;
    }

    private boolean currentMccEqualsSimMcc(ServiceState s) {
        boolean equalsMcc = true;
        try {
            equalsMcc = ((TelephonyManager) this.mPhone.getContext().getSystemService("phone")).getSimOperatorNumericForPhone(getPhoneId()).substring(0, 3).equals(s.getOperatorNumeric().substring(0, 3));
        } catch (Exception e) {
        }
        return equalsMcc;
    }

    private boolean isOperatorConsideredNonRoaming(ServiceState s) {
        String operatorNumeric = s.getOperatorNumeric();
        String[] numericArray = this.mPhone.getContext().getResources().getStringArray(17236020);
        if (numericArray.length == 0 || operatorNumeric == null) {
            return VDBG;
        }
        for (String numeric : numericArray) {
            if (operatorNumeric.startsWith(numeric)) {
                return true;
            }
        }
        return VDBG;
    }

    private boolean isOperatorConsideredRoaming(ServiceState s) {
        String operatorNumeric = s.getOperatorNumeric();
        String[] numericArray = this.mPhone.getContext().getResources().getStringArray(17236021);
        if (numericArray.length == 0 || operatorNumeric == null) {
            return VDBG;
        }
        for (String numeric : numericArray) {
            if (operatorNumeric.startsWith(numeric)) {
                return true;
            }
        }
        return VDBG;
    }

    public int getCurrentDataConnectionState() {
        return this.mSS.getDataRegState();
    }

    public boolean isConcurrentVoiceAndDataAllowed() {
        return this.mSS.getRilVoiceRadioTechnology() >= 3 ? true : VDBG;
    }

    public CellLocation getCellLocation() {
        if (this.mCellLoc.getLac() < 0 || this.mCellLoc.getCid() < 0) {
            List<CellInfo> result = getAllCellInfo();
            if (result != null) {
                CellLocation cellLocOther = new GsmCellLocation();
                for (CellInfo ci : result) {
                    if (ci instanceof CellInfoGsm) {
                        CellIdentityGsm cellIdentityGsm = ((CellInfoGsm) ci).getCellIdentity();
                        cellLocOther.setLacAndCid(cellIdentityGsm.getLac(), cellIdentityGsm.getCid());
                        cellLocOther.setPsc(cellIdentityGsm.getPsc());
                        log("getCellLocation(): X ret GSM info=" + cellLocOther);
                        return cellLocOther;
                    } else if (ci instanceof CellInfoWcdma) {
                        CellIdentityWcdma cellIdentityWcdma = ((CellInfoWcdma) ci).getCellIdentity();
                        cellLocOther.setLacAndCid(cellIdentityWcdma.getLac(), cellIdentityWcdma.getCid());
                        cellLocOther.setPsc(cellIdentityWcdma.getPsc());
                        log("getCellLocation(): X ret WCDMA info=" + cellLocOther);
                        return cellLocOther;
                    } else if ((ci instanceof CellInfoLte) && (cellLocOther.getLac() < 0 || cellLocOther.getCid() < 0)) {
                        CellIdentityLte cellIdentityLte = ((CellInfoLte) ci).getCellIdentity();
                        if (!(cellIdentityLte.getTac() == Integer.MAX_VALUE || cellIdentityLte.getCi() == Integer.MAX_VALUE)) {
                            cellLocOther.setLacAndCid(cellIdentityLte.getTac(), cellIdentityLte.getCi());
                            cellLocOther.setPsc(0);
                            log("getCellLocation(): possible LTE cellLocOther=" + cellLocOther);
                        }
                    }
                }
                log("getCellLocation(): X ret best answer cellLocOther=" + cellLocOther);
                return cellLocOther;
            }
            log("getCellLocation(): X empty mCellLoc and CellInfo mCellLoc=" + this.mCellLoc);
            return this.mCellLoc;
        }
        log("getCellLocation(): X good mCellLoc=" + this.mCellLoc);
        return this.mCellLoc;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void setTimeFromNITZString(java.lang.String r33, long r34) {
        /*
        r32 = this;
        r20 = android.os.SystemClock.elapsedRealtime();
        r26 = new java.lang.StringBuilder;
        r26.<init>();
        r27 = "NITZ: ";
        r26 = r26.append(r27);
        r0 = r26;
        r1 = r33;
        r26 = r0.append(r1);
        r27 = ",";
        r26 = r26.append(r27);
        r0 = r26;
        r1 = r34;
        r26 = r0.append(r1);
        r27 = " start=";
        r26 = r26.append(r27);
        r0 = r26;
        r1 = r20;
        r26 = r0.append(r1);
        r27 = " delay=";
        r26 = r26.append(r27);
        r28 = r20 - r34;
        r0 = r26;
        r1 = r28;
        r26 = r0.append(r1);
        r26 = r26.toString();
        r0 = r32;
        r1 = r26;
        r0.log(r1);
        r26 = "GMT";
        r26 = java.util.TimeZone.getTimeZone(r26);	 Catch:{ RuntimeException -> 0x027c }
        r6 = java.util.Calendar.getInstance(r26);	 Catch:{ RuntimeException -> 0x027c }
        r6.clear();	 Catch:{ RuntimeException -> 0x027c }
        r26 = 16;
        r27 = 0;
        r0 = r26;
        r1 = r27;
        r6.set(r0, r1);	 Catch:{ RuntimeException -> 0x027c }
        r26 = "[/:,+-]";
        r0 = r33;
        r1 = r26;
        r17 = r0.split(r1);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 0;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r26 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
        r0 = r26;
        r0 = r0 + 2000;
        r24 = r0;
        r26 = 1;
        r0 = r26;
        r1 = r24;
        r6.set(r0, r1);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 1;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r26 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
        r16 = r26 + -1;
        r26 = 2;
        r0 = r26;
        r1 = r16;
        r6.set(r0, r1);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 2;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r7 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 5;
        r0 = r26;
        r6.set(r0, r7);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 3;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r10 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 10;
        r0 = r26;
        r6.set(r0, r10);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 4;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r13 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 12;
        r0 = r26;
        r6.set(r0, r13);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 5;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r18 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 13;
        r0 = r26;
        r1 = r18;
        r6.set(r0, r1);	 Catch:{ RuntimeException -> 0x027c }
        r26 = 45;
        r0 = r33;
        r1 = r26;
        r26 = r0.indexOf(r1);	 Catch:{ RuntimeException -> 0x027c }
        r27 = -1;
        r0 = r26;
        r1 = r27;
        if (r0 != r1) goto L_0x020a;
    L_0x00ea:
        r19 = 1;
    L_0x00ec:
        r26 = 6;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r22 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
        r0 = r17;
        r0 = r0.length;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        r27 = 8;
        r0 = r26;
        r1 = r27;
        if (r0 < r1) goto L_0x020e;
    L_0x0101:
        r26 = 7;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r8 = java.lang.Integer.parseInt(r26);	 Catch:{ RuntimeException -> 0x027c }
    L_0x0109:
        if (r19 == 0) goto L_0x0211;
    L_0x010b:
        r26 = 1;
    L_0x010d:
        r26 = r26 * r22;
        r26 = r26 * 15;
        r26 = r26 * 60;
        r0 = r26;
        r0 = r0 * 1000;
        r22 = r0;
        r25 = 0;
        r0 = r17;
        r0 = r0.length;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        r27 = 9;
        r0 = r26;
        r1 = r27;
        if (r0 < r1) goto L_0x014c;
    L_0x0128:
        r26 = 8;
        r26 = r17[r26];	 Catch:{ RuntimeException -> 0x027c }
        r27 = 33;
        r28 = 47;
        r23 = r26.replace(r27, r28);	 Catch:{ RuntimeException -> 0x027c }
        r25 = java.util.TimeZone.getTimeZone(r23);	 Catch:{ RuntimeException -> 0x027c }
        r26 = "GMT";
        r26 = java.util.TimeZone.getTimeZone(r26);	 Catch:{ RuntimeException -> 0x027c }
        r0 = r26;
        r1 = r25;
        r26 = r0.equals(r1);	 Catch:{ RuntimeException -> 0x027c }
        if (r26 == 0) goto L_0x014c;
    L_0x0148:
        if (r22 == 0) goto L_0x014c;
    L_0x014a:
        r25 = 0;
    L_0x014c:
        r0 = r32;
        r0 = r0.mPhone;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        r26 = r26.getContext();	 Catch:{ RuntimeException -> 0x027c }
        r27 = "phone";
        r26 = r26.getSystemService(r27);	 Catch:{ RuntimeException -> 0x027c }
        r26 = (android.telephony.TelephonyManager) r26;	 Catch:{ RuntimeException -> 0x027c }
        r0 = r32;
        r0 = r0.mPhone;	 Catch:{ RuntimeException -> 0x027c }
        r27 = r0;
        r27 = r27.getPhoneId();	 Catch:{ RuntimeException -> 0x027c }
        r12 = r26.getNetworkCountryIsoForPhone(r27);	 Catch:{ RuntimeException -> 0x027c }
        if (r25 != 0) goto L_0x0190;
    L_0x016e:
        r0 = r32;
        r0 = r0.mGotCountryCode;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        if (r26 == 0) goto L_0x0190;
    L_0x0176:
        if (r12 == 0) goto L_0x0219;
    L_0x0178:
        r26 = r12.length();	 Catch:{ RuntimeException -> 0x027c }
        if (r26 <= 0) goto L_0x0219;
    L_0x017e:
        if (r8 == 0) goto L_0x0215;
    L_0x0180:
        r26 = 1;
    L_0x0182:
        r28 = r6.getTimeInMillis();	 Catch:{ RuntimeException -> 0x027c }
        r0 = r22;
        r1 = r26;
        r2 = r28;
        r25 = android.util.TimeUtils.getTimeZone(r0, r1, r2, r12);	 Catch:{ RuntimeException -> 0x027c }
    L_0x0190:
        if (r25 == 0) goto L_0x01ae;
    L_0x0192:
        r0 = r32;
        r0 = r0.mZoneOffset;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        r0 = r26;
        r1 = r22;
        if (r0 != r1) goto L_0x01ae;
    L_0x019e:
        r0 = r32;
        r0 = r0.mZoneDst;	 Catch:{ RuntimeException -> 0x027c }
        r27 = r0;
        if (r8 == 0) goto L_0x0232;
    L_0x01a6:
        r26 = 1;
    L_0x01a8:
        r0 = r27;
        r1 = r26;
        if (r0 == r1) goto L_0x01d0;
    L_0x01ae:
        r26 = 1;
        r0 = r26;
        r1 = r32;
        r1.mNeedFixZoneAfterNitz = r0;	 Catch:{ RuntimeException -> 0x027c }
        r0 = r22;
        r1 = r32;
        r1.mZoneOffset = r0;	 Catch:{ RuntimeException -> 0x027c }
        if (r8 == 0) goto L_0x0236;
    L_0x01be:
        r26 = 1;
    L_0x01c0:
        r0 = r26;
        r1 = r32;
        r1.mZoneDst = r0;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r6.getTimeInMillis();	 Catch:{ RuntimeException -> 0x027c }
        r0 = r26;
        r2 = r32;
        r2.mZoneTime = r0;	 Catch:{ RuntimeException -> 0x027c }
    L_0x01d0:
        if (r25 == 0) goto L_0x01ee;
    L_0x01d2:
        r26 = r32.getAutoTimeZone();	 Catch:{ RuntimeException -> 0x027c }
        if (r26 == 0) goto L_0x01e3;
    L_0x01d8:
        r26 = r25.getID();	 Catch:{ RuntimeException -> 0x027c }
        r0 = r32;
        r1 = r26;
        r0.setAndBroadcastNetworkSetTimeZone(r1);	 Catch:{ RuntimeException -> 0x027c }
    L_0x01e3:
        r26 = r25.getID();	 Catch:{ RuntimeException -> 0x027c }
        r0 = r32;
        r1 = r26;
        r0.saveNitzTimeZone(r1);	 Catch:{ RuntimeException -> 0x027c }
    L_0x01ee:
        r26 = "gsm.ignore-nitz";
        r11 = android.os.SystemProperties.get(r26);	 Catch:{ RuntimeException -> 0x027c }
        if (r11 == 0) goto L_0x0239;
    L_0x01f6:
        r26 = "yes";
        r0 = r26;
        r26 = r11.equals(r0);	 Catch:{ RuntimeException -> 0x027c }
        if (r26 == 0) goto L_0x0239;
    L_0x0200:
        r26 = "NITZ: Not setting clock because gsm.ignore-nitz is set";
        r0 = r32;
        r1 = r26;
        r0.log(r1);	 Catch:{ RuntimeException -> 0x027c }
    L_0x0209:
        return;
    L_0x020a:
        r19 = 0;
        goto L_0x00ec;
    L_0x020e:
        r8 = 0;
        goto L_0x0109;
    L_0x0211:
        r26 = -1;
        goto L_0x010d;
    L_0x0215:
        r26 = 0;
        goto L_0x0182;
    L_0x0219:
        if (r8 == 0) goto L_0x022f;
    L_0x021b:
        r26 = 1;
    L_0x021d:
        r28 = r6.getTimeInMillis();	 Catch:{ RuntimeException -> 0x027c }
        r0 = r32;
        r1 = r22;
        r2 = r26;
        r3 = r28;
        r25 = r0.getNitzTimeZone(r1, r2, r3);	 Catch:{ RuntimeException -> 0x027c }
        goto L_0x0190;
    L_0x022f:
        r26 = 0;
        goto L_0x021d;
    L_0x0232:
        r26 = 0;
        goto L_0x01a8;
    L_0x0236:
        r26 = 0;
        goto L_0x01c0;
    L_0x0239:
        r0 = r32;
        r0 = r0.mWakeLock;	 Catch:{ all -> 0x037d }
        r26 = r0;
        r26.acquire();	 Catch:{ all -> 0x037d }
        r26 = r32.getAutoTime();	 Catch:{ all -> 0x037d }
        if (r26 == 0) goto L_0x0352;
    L_0x0248:
        r26 = android.os.SystemClock.elapsedRealtime();	 Catch:{ all -> 0x037d }
        r14 = r26 - r34;
        r26 = 0;
        r26 = (r14 > r26 ? 1 : (r14 == r26 ? 0 : -1));
        if (r26 >= 0) goto L_0x02a9;
    L_0x0254:
        r26 = new java.lang.StringBuilder;	 Catch:{ all -> 0x037d }
        r26.<init>();	 Catch:{ all -> 0x037d }
        r27 = "NITZ: not setting time, clock has rolled backwards since NITZ time was received, ";
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r0 = r26;
        r1 = r33;
        r26 = r0.append(r1);	 Catch:{ all -> 0x037d }
        r26 = r26.toString();	 Catch:{ all -> 0x037d }
        r0 = r32;
        r1 = r26;
        r0.log(r1);	 Catch:{ all -> 0x037d }
        r0 = r32;
        r0 = r0.mWakeLock;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        r26.release();	 Catch:{ RuntimeException -> 0x027c }
        goto L_0x0209;
    L_0x027c:
        r9 = move-exception;
        r26 = new java.lang.StringBuilder;
        r26.<init>();
        r27 = "NITZ: Parsing NITZ time ";
        r26 = r26.append(r27);
        r0 = r26;
        r1 = r33;
        r26 = r0.append(r1);
        r27 = " ex=";
        r26 = r26.append(r27);
        r0 = r26;
        r26 = r0.append(r9);
        r26 = r26.toString();
        r0 = r32;
        r1 = r26;
        r0.loge(r1);
        goto L_0x0209;
    L_0x02a9:
        r26 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r26 = (r14 > r26 ? 1 : (r14 == r26 ? 0 : -1));
        if (r26 <= 0) goto L_0x02e4;
    L_0x02b0:
        r26 = new java.lang.StringBuilder;	 Catch:{ all -> 0x037d }
        r26.<init>();	 Catch:{ all -> 0x037d }
        r27 = "NITZ: not setting time, processing has taken ";
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r28 = 86400000; // 0x5265c00 float:7.82218E-36 double:4.2687272E-316;
        r28 = r14 / r28;
        r0 = r26;
        r1 = r28;
        r26 = r0.append(r1);	 Catch:{ all -> 0x037d }
        r27 = " days";
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r26 = r26.toString();	 Catch:{ all -> 0x037d }
        r0 = r32;
        r1 = r26;
        r0.log(r1);	 Catch:{ all -> 0x037d }
        r0 = r32;
        r0 = r0.mWakeLock;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        r26.release();	 Catch:{ RuntimeException -> 0x027c }
        goto L_0x0209;
    L_0x02e4:
        r26 = 14;
        r0 = (int) r14;
        r27 = r0;
        r0 = r26;
        r1 = r27;
        r6.add(r0, r1);	 Catch:{ all -> 0x037d }
        r26 = new java.lang.StringBuilder;	 Catch:{ all -> 0x037d }
        r26.<init>();	 Catch:{ all -> 0x037d }
        r27 = "NITZ: Setting time of day to ";
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r27 = r6.getTime();	 Catch:{ all -> 0x037d }
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r27 = " NITZ receive delay(ms): ";
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r0 = r26;
        r26 = r0.append(r14);	 Catch:{ all -> 0x037d }
        r27 = " gained(ms): ";
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r28 = r6.getTimeInMillis();	 Catch:{ all -> 0x037d }
        r30 = java.lang.System.currentTimeMillis();	 Catch:{ all -> 0x037d }
        r28 = r28 - r30;
        r0 = r26;
        r1 = r28;
        r26 = r0.append(r1);	 Catch:{ all -> 0x037d }
        r27 = " from ";
        r26 = r26.append(r27);	 Catch:{ all -> 0x037d }
        r0 = r26;
        r1 = r33;
        r26 = r0.append(r1);	 Catch:{ all -> 0x037d }
        r26 = r26.toString();	 Catch:{ all -> 0x037d }
        r0 = r32;
        r1 = r26;
        r0.log(r1);	 Catch:{ all -> 0x037d }
        r26 = r6.getTimeInMillis();	 Catch:{ all -> 0x037d }
        r0 = r32;
        r1 = r26;
        r0.setAndBroadcastNetworkSetTime(r1);	 Catch:{ all -> 0x037d }
        r26 = "GsmSST";
        r27 = "NITZ: after Setting time of day";
        android.telephony.Rlog.i(r26, r27);	 Catch:{ all -> 0x037d }
    L_0x0352:
        r26 = "gsm.nitz.time";
        r28 = r6.getTimeInMillis();	 Catch:{ all -> 0x037d }
        r27 = java.lang.String.valueOf(r28);	 Catch:{ all -> 0x037d }
        android.os.SystemProperties.set(r26, r27);	 Catch:{ all -> 0x037d }
        r26 = r6.getTimeInMillis();	 Catch:{ all -> 0x037d }
        r0 = r32;
        r1 = r26;
        r0.saveNitzTime(r1);	 Catch:{ all -> 0x037d }
        r26 = 1;
        r0 = r26;
        r1 = r32;
        r1.mNitzUpdatedTime = r0;	 Catch:{ all -> 0x037d }
        r0 = r32;
        r0 = r0.mWakeLock;	 Catch:{ RuntimeException -> 0x027c }
        r26 = r0;
        r26.release();	 Catch:{ RuntimeException -> 0x027c }
        goto L_0x0209;
    L_0x037d:
        r26 = move-exception;
        r0 = r32;
        r0 = r0.mWakeLock;	 Catch:{ RuntimeException -> 0x027c }
        r27 = r0;
        r27.release();	 Catch:{ RuntimeException -> 0x027c }
        throw r26;	 Catch:{ RuntimeException -> 0x027c }
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.internal.telephony.gsm.GsmServiceStateTracker.setTimeFromNITZString(java.lang.String, long):void");
    }

    private boolean getAutoTime() {
        try {
            return Global.getInt(this.mPhone.getContext().getContentResolver(), "auto_time") > 0 ? true : VDBG;
        } catch (SettingNotFoundException e) {
            return true;
        }
    }

    private boolean getAutoTimeZone() {
        try {
            return Global.getInt(this.mPhone.getContext().getContentResolver(), "auto_time_zone") > 0 ? true : VDBG;
        } catch (SettingNotFoundException e) {
            return true;
        }
    }

    private void saveNitzTimeZone(String zoneId) {
        this.mSavedTimeZone = zoneId;
    }

    private void saveNitzTime(long time) {
        this.mSavedTime = time;
        this.mSavedAtTime = SystemClock.elapsedRealtime();
    }

    private void setAndBroadcastNetworkSetTimeZone(String zoneId) {
        log("setAndBroadcastNetworkSetTimeZone: setTimeZone=" + zoneId);
        ((AlarmManager) this.mPhone.getContext().getSystemService("alarm")).setTimeZone(zoneId);
        Intent intent = new Intent("android.intent.action.NETWORK_SET_TIMEZONE");
        intent.addFlags(536870912);
        intent.putExtra("time-zone", zoneId);
        this.mPhone.getContext().sendStickyBroadcastAsUser(intent, UserHandle.ALL);
        log("setAndBroadcastNetworkSetTimeZone: call alarm.setTimeZone and broadcast zoneId=" + zoneId);
    }

    private void setAndBroadcastNetworkSetTime(long time) {
        log("setAndBroadcastNetworkSetTime: time=" + time + "ms");
        SystemClock.setCurrentTimeMillis(time);
        Intent intent = new Intent("android.intent.action.NETWORK_SET_TIME");
        intent.addFlags(536870912);
        intent.putExtra("time", time);
        this.mPhone.getContext().sendStickyBroadcastAsUser(intent, UserHandle.ALL);
    }

    private void revertToNitzTime() {
        if (Global.getInt(this.mPhone.getContext().getContentResolver(), "auto_time", 0) != 0) {
            log("Reverting to NITZ Time: mSavedTime=" + this.mSavedTime + " mSavedAtTime=" + this.mSavedAtTime);
            if (this.mSavedTime != 0 && this.mSavedAtTime != 0) {
                setAndBroadcastNetworkSetTime(this.mSavedTime + (SystemClock.elapsedRealtime() - this.mSavedAtTime));
            }
        }
    }

    private void revertToNitzTimeZone() {
        if (Global.getInt(this.mPhone.getContext().getContentResolver(), "auto_time_zone", 0) != 0) {
            log("Reverting to NITZ TimeZone: tz='" + this.mSavedTimeZone);
            if (this.mSavedTimeZone != null) {
                setAndBroadcastNetworkSetTimeZone(this.mSavedTimeZone);
            }
        }
    }

    private void setNotification(int notifyType) {
        log("setNotification: create notification " + notifyType);
        if (this.mPhone.getContext().getResources().getBoolean(17956947)) {
            Context context = this.mPhone.getContext();
            this.mNotification = new Notification();
            this.mNotification.when = System.currentTimeMillis();
            this.mNotification.flags = 16;
            this.mNotification.icon = 17301642;
            Intent intent = new Intent();
            this.mNotification.contentIntent = PendingIntent.getActivity(context, 0, intent, 268435456);
            CharSequence details = "";
            CharSequence title = context.getText(17039536);
            int notificationId = CS_NOTIFICATION;
            switch (notifyType) {
                case PS_ENABLED /*1001*/:
                    if (((long) SubscriptionManager.getDefaultDataSubId()) == ((long) this.mPhone.getSubId())) {
                        notificationId = PS_NOTIFICATION;
                        details = context.getText(17039537);
                        break;
                    }
                    return;
                case PS_DISABLED /*1002*/:
                    notificationId = PS_NOTIFICATION;
                    break;
                case CS_ENABLED /*1003*/:
                    details = context.getText(17039540);
                    break;
                case CS_NORMAL_ENABLED /*1005*/:
                    details = context.getText(17039539);
                    break;
                case CS_EMERGENCY_ENABLED /*1006*/:
                    details = context.getText(17039538);
                    break;
            }
            log("setNotification: put notification " + title + " / " + details);
            this.mNotification.tickerText = title;
            this.mNotification.color = context.getResources().getColor(17170521);
            this.mNotification.setLatestEventInfo(context, title, details, this.mNotification.contentIntent);
            NotificationManager notificationManager = (NotificationManager) context.getSystemService("notification");
            if (notifyType == PS_DISABLED || notifyType == CS_DISABLED) {
                notificationManager.cancel(notificationId);
                return;
            } else {
                notificationManager.notify(notificationId, this.mNotification);
                return;
            }
        }
        log("Ignore all the notifications");
    }

    private UiccCardApplication getUiccCardApplication() {
        return this.mUiccController.getUiccCardApplication(this.mPhone.getPhoneId(), 1);
    }

    protected void onUpdateIccAvailability() {
        if (this.mUiccController != null) {
            UiccCardApplication newUiccApplication = getUiccCardApplication();
            if (this.mUiccApplcation != newUiccApplication) {
                if (this.mUiccApplcation != null) {
                    log("Removing stale icc objects.");
                    this.mUiccApplcation.unregisterForReady(this);
                    if (this.mIccRecords != null) {
                        this.mIccRecords.unregisterForRecordsLoaded(this);
                    }
                    this.mIccRecords = null;
                    this.mUiccApplcation = null;
                }
                if (newUiccApplication != null) {
                    log("New card found");
                    this.mUiccApplcation = newUiccApplication;
                    this.mIccRecords = this.mUiccApplcation.getIccRecords();
                    this.mUiccApplcation.registerForReady(this, 17, null);
                    if (this.mIccRecords != null) {
                        this.mIccRecords.registerForRecordsLoaded(this, 16, null);
                    }
                }
            }
        }
    }

    protected void log(String s) {
        Rlog.d(LOG_TAG, "[GsmSST] " + s);
    }

    protected void loge(String s) {
        Rlog.e(LOG_TAG, "[GsmSST] " + s);
    }

    public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
        pw.println("GsmServiceStateTracker extends:");
        super.dump(fd, pw, args);
        pw.println(" mPhone=" + this.mPhone);
        pw.println(" mSS=" + this.mSS);
        pw.println(" mNewSS=" + this.mNewSS);
        pw.println(" mCellLoc=" + this.mCellLoc);
        pw.println(" mNewCellLoc=" + this.mNewCellLoc);
        pw.println(" mPreferredNetworkType=" + this.mPreferredNetworkType);
        pw.println(" mMaxDataCalls=" + this.mMaxDataCalls);
        pw.println(" mNewMaxDataCalls=" + this.mNewMaxDataCalls);
        pw.println(" mReasonDataDenied=" + this.mReasonDataDenied);
        pw.println(" mNewReasonDataDenied=" + this.mNewReasonDataDenied);
        pw.println(" mGsmRoaming=" + this.mGsmRoaming);
        pw.println(" mDataRoaming=" + this.mDataRoaming);
        pw.println(" mEmergencyOnly=" + this.mEmergencyOnly);
        pw.println(" mNeedFixZoneAfterNitz=" + this.mNeedFixZoneAfterNitz);
        pw.flush();
        pw.println(" mZoneOffset=" + this.mZoneOffset);
        pw.println(" mZoneDst=" + this.mZoneDst);
        pw.println(" mZoneTime=" + this.mZoneTime);
        pw.println(" mGotCountryCode=" + this.mGotCountryCode);
        pw.println(" mNitzUpdatedTime=" + this.mNitzUpdatedTime);
        pw.println(" mSavedTimeZone=" + this.mSavedTimeZone);
        pw.println(" mSavedTime=" + this.mSavedTime);
        pw.println(" mSavedAtTime=" + this.mSavedAtTime);
        pw.println(" mStartedGprsRegCheck=" + this.mStartedGprsRegCheck);
        pw.println(" mReportedGprsNoReg=" + this.mReportedGprsNoReg);
        pw.println(" mNotification=" + this.mNotification);
        pw.println(" mWakeLock=" + this.mWakeLock);
        pw.println(" mCurSpn=" + this.mCurSpn);
        pw.println(" mCurShowSpn=" + this.mCurShowSpn);
        pw.println(" mCurPlmn=" + this.mCurPlmn);
        pw.println(" mCurShowPlmn=" + this.mCurShowPlmn);
        pw.flush();
    }

    public void powerOffRadioSafely(DcTrackerBase dcTracker) {
        synchronized (this) {
            if (!this.mPendingRadioPowerOffAfterDataOff) {
                int dds = SubscriptionManager.getDefaultDataSubId();
                if (!dcTracker.isDisconnected() || (dds != this.mPhone.getSubId() && (dds == this.mPhone.getSubId() || !ProxyController.getInstance().isDataDisconnected(dds)))) {
                    if (this.mPhone.isInCall()) {
                        this.mPhone.mCT.mRingingCall.hangupIfAlive();
                        this.mPhone.mCT.mBackgroundCall.hangupIfAlive();
                        this.mPhone.mCT.mForegroundCall.hangupIfAlive();
                    }
                    dcTracker.cleanUpAllConnections(Phone.REASON_RADIO_TURNED_OFF);
                    if (!(dds == this.mPhone.getSubId() || ProxyController.getInstance().isDataDisconnected(dds))) {
                        log("Data is active on DDS.  Wait for all data disconnect");
                        ProxyController.getInstance().registerForAllDataDisconnected(dds, this, PS_ENABLED, null);
                        this.mPendingRadioPowerOffAfterDataOff = true;
                    }
                    Message msg = Message.obtain(this);
                    msg.what = 38;
                    int i = this.mPendingRadioPowerOffAfterDataOffTag + 1;
                    this.mPendingRadioPowerOffAfterDataOffTag = i;
                    msg.arg1 = i;
                    if (sendMessageDelayed(msg, 30000)) {
                        log("Wait upto 30s for data to disconnect, then turn off radio.");
                        this.mPendingRadioPowerOffAfterDataOff = true;
                    } else {
                        log("Cannot send delayed Msg, turn off radio right away.");
                        hangupAndPowerOff();
                        this.mPendingRadioPowerOffAfterDataOff = VDBG;
                    }
                } else {
                    dcTracker.cleanUpAllConnections(Phone.REASON_RADIO_TURNED_OFF);
                    log("Data disconnected, turn off radio right away.");
                    hangupAndPowerOff();
                }
            }
        }
    }

    public void setImsRegistrationState(boolean registered) {
        if (this.mImsRegistrationOnOff && !registered && this.mAlarmSwitch) {
            this.mImsRegistrationOnOff = registered;
            ((AlarmManager) this.mPhone.getContext().getSystemService("alarm")).cancel(this.mRadioOffIntent);
            this.mAlarmSwitch = VDBG;
            sendMessage(obtainMessage(45));
            return;
        }
        this.mImsRegistrationOnOff = registered;
    }

    public void onSetPhoneRCDone(ArrayList<RadioAccessFamily> phoneRcs) {
        boolean needToChangeNetworkMode = VDBG;
        int myPhoneId = this.mPhone.getPhoneId();
        int newCapability = 0;
        int networkMode = -1;
        if (phoneRcs != null) {
            int size = phoneRcs.size();
            for (int i = 0; i < size; i++) {
                RadioAccessFamily phoneRaf = (RadioAccessFamily) phoneRcs.get(i);
                if (myPhoneId == phoneRaf.getPhoneId()) {
                    needToChangeNetworkMode = true;
                    newCapability = phoneRaf.getRadioAccessFamily();
                    break;
                }
            }
            if (needToChangeNetworkMode) {
                if ((newCapability & 16384) == 16384) {
                    networkMode = 9;
                } else if ((newCapability & 8) == 8) {
                    networkMode = 0;
                } else if ((newCapability & 65536) == 65536) {
                    networkMode = 1;
                } else {
                    networkMode = -1;
                    log("Error: capability is not define");
                }
                log("myPhoneId=" + myPhoneId + " newCapability=" + newCapability + " networkMode=" + networkMode);
                if (networkMode != -1) {
                    this.mCi.setPreferredNetworkType(networkMode, null);
                }
            }
        }
    }
}
